digits = 0
outfile <- paste(outdir, "14_PoolReplicates.csv", sep="")
read_count_samples_df <- PoolReplicates(read_count_df, digits=digits, outfile=outfile, sep=sep)
###
### TaxAssign
###
outfile <- paste(outdir, "15_TaxAssign.csv", sep="")
asv_tax <- TaxAssign(df=read_count_samples_df, ltg_params_df=ltg_params_df, taxonomy=taxonomy, blast_db=blast_db, blast_path=blast_path, outfile=outfile, num_threads=num_threads)
###
### print output files
###
# write sequence and variant counts after each step
write.csv(stat_df, file = paste(outdir, "stat_steps.csv", sep=""))
# long format, each line corresponds to an occurrence (); if csv files are written at each step, this is not usefull
#write.csv(read_count_samples_df, file = paste(outdir, "16_Final_asvtable_long.csv", sep=""), row.names=F)
# wide format (ASV table), samples are in columns, ASVs in lines
outfile=paste(outdir, "Final_asvtable.csv", sep="")
sortedinfo <- paste(sorted_dir, "sortedinfo.csv", sep ="")
write_asvtable(read_count_samples_df, outfile=outfile, sortedinfo=sortedinfo, add_empty_samples=T, add_sums_by_sample=T, add_sums_by_asv=T, add_expected_asv=T, mock_composition=mock_composition, sep=sep)
# write ASV table completed by taxonomic assignments
outfile=paste(outdir, "Final_asvtable_with_taxassign.csv", sep="")
write_asvtable(read_count_samples_df, outfile=outfile, asv_tax=asv_tax, sortedinfo=sortedinfo, add_empty_samples=T, add_sums_by_sample=T, add_sums_by_asv=T, add_expected_asv=T, mock_composition=mock_composition, sep=sep)
# start optimize from almost unfiltered data (after eliminating ASV with low global reads count)
file <- paste(outdir, "2_Swarm.csv", sep="")
read_count_df <- read.csv(file, sep=sep)
dim(read_count_df)
###
### OptimizePCRError
###
outfile <- paste(outdir, "OptimizePCRError.csv", sep="")
OptimizePCRError_df <- OptimizePCRError(read_count_df, mock_composition=mock_composition, sep=sep, outfile=outfile, max_mismatch=1, min_read_count=10)
###
### OptimizeLFNsampleReplicate
###
outfile = paste(outdir, "OptimizeLFNsampleReplicate.csv", sep="")
OptimizeLFNsampleReplicate_df <- OptimizeLFNsampleReplicate(read_count_df, mock_composition=mock_composition, sep=sep, outfile=outfile)
###
### Make known occurrences
###
file <- paste(outdir, "14_PoolReplicates.csv", sep="")
read_count_samples_df <- read.csv(file, sep=sep)
sortedinfo <- paste(sorted_dir, "sortedinfo.csv", sep ="")
known_occurrences <- paste(outdir, "known_occurrences.csv", sep= "")
missing_occurrences <- paste(outdir, "missing_occurrences.csv", sep= "")
habitat_proportion= 0.5 # for each asv, if the proportion of reads in a habitat is below this cutoff, is is considered as an artifact in all samples of the habitat
TP_df <- make_known_occurrences(read_count_samples_df, sortedinfo=sortedinfo, mock_composition=mock_composition, sep=sep, known_occurrences=known_occurrences, missing_occurrences=missing_occurrences, habitat_proportion=habitat_proportion)
###
### OptimizeLFNReaCountAndLFNvariant
###
min_replicate_number=2
lfn_sample_replicate_cutoff=0.002
pcr_error_var_prop=0.1
min_lfn_read_count_cutoff=10
max_lfn_read_count_cutoff=100
increment_lfn_read_count_cutoff=5
min_lnf_variant_cutoff=0.001
max_lnf_variant_cutoff=0.05
increment_lnf_variant_cutoff=0.001
by_replicate=FALSE
vsearch_path=""
max_mismatch=1
by_sample=T
sample_prop=0.8
min_replicate_number=2
outfile = paste(outdir, "OptimizeLFNReadCountAndLFNvariant.csv", sep="")
OptimizeLFNReadCountAndLFNvariant_df <- OptimizeLFNReadCountAndLFNvariant(read_count_df, known_occurrences=known_occurrences, sep=sep, outfile= outfile, min_lfn_read_count_cutoff=lfn_read_count_cutoff, max_lfn_read_count_cutoff=max_lfn_read_count_cutoff, increment_lfn_read_count_cutoff=increment_lfn_read_count_cutoff, min_lnf_variant_cutoff=min_lnf_variant_cutoff, max_lnf_variant_cutoff=max_lnf_variant_cutoff, increment_lnf_variant_cutoff=increment_lnf_variant_cutoff, by_replicate=by_replicate, lfn_sample_replicate_cutoff=lfn_sample_replicate_cutoff, pcr_error_var_prop=pcr_error_var_prop, vsearch_path=vsearch_path, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, min_replicate_number=min_replicate_number)
###
# check the a particular value of a feature (asv, asv_id, sample, replicate) in all intermediate output files
###
tmp <- history_by(dir=outdir, feature="asv_id", value="3906", sep=sep)
###
# check the a particular value of a feature (asv, asv_id, sample, replicate) in all intermediate output files
###
tmp <- history_by(dir=outdir, feature="asv_id", value="3906", sep=sep)
View(tmp)
###
# Test major functions
###
test_merge_and_sortreads(test_dir="vtamR_test/", vsearch_path=vsearch_path, cutadapt_path=cutadapt_path)
test_filters(test_dir="vtamR_test/", vsearch_path=vsearch_path, sep=sep)
test_filters <- function(test_dir="~/vtamR/vtamR_test/", vsearch_path="", sep=","){
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep) %>%
rename("asv_id"=seq_id)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, sep=sep)
global_read_count_cutoff_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
comp_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, step="LFN_global_read_count")
input_df_tmp <- input_df %>%
select(-asv_id)
### LFN_filters
# LFN_read_count
lfn_read_count_cutoff <- 10
lfn_read_count_df <- LFN_read_count(input_df_tmp, cutoff=lfn_read_count_cutoff, sep=sep)
lfn_read_count_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_min_read_count_out.csv", sep=""), sep=sep)
comp_LFN_read_count <- compare_df(lfn_read_count_df, lfn_read_count_exp_df, step="LFN_read_count")
# LFN_sample_replicate (by column)
lfn_sample_replicate_cutoff <- 0.001
lnf_sample_replicate_df <- LFN_sample_replicate(input_df_tmp, cutoff=lfn_sample_replicate_cutoff, sep=sep)
lnf_sample_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_sample_replicate_out.csv", sep=""), sep=sep)
comp_LFN_sample_replicate <- compare_df(lnf_sample_replicate_df, lnf_sample_replicate_exp_df, step="LFN_sample_replicate")
# LFN_variant_replicate (by line)
lnf_variant_cutoff = 0.002
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate=by_replicate, sep=sep, min_read_count_prop=0.7)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate002_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
# LFN_variant (by line)
lnf_variant_cutoff = 0.002
by_replicate = FALSE
lnf_variant_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate=by_replicate, sep=sep)
lnf_variant_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant002_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lnf_variant_df, lnf_variant_exp_df, step="LFN_variant")
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
lfn_pool_df <- pool_LFN(lfn_read_count_df, lnf_sample_replicate_df, lnf_variant_df, sep=sep)
lnf_pool_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_pool_LFN_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lfn_pool_df, lnf_pool_exp_df, step="pool_LFN")
### keep repeatable occurrences
min_replicate_number <- 2
FilterMinReplicateNumber_df <- FilterMinReplicateNumber(input_df, min_replicate_number, sep=sep)
FilterMinReplicateNumber_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_repeat_out.csv", sep=""), sep=sep)
comp_FilterMinReplicateNumber <- compare_df(FilterMinReplicateNumber_df, FilterMinReplicateNumber_exp_df, step="FilterMinReplicateNumber")
### FilterPCRerror
pcr_error_var_prop <- 0.1
max_mismatch <- 1
by_sample <- T
sample_prop <- 0.3
FilterPCRerror_df1 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df1 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr1_03_out.csv", sep=""), sep=sep)
comp_FilterPCRerror1 <- compare_df(FilterPCRerror_df1, FilterPCRerror_exp_df1, step="FilterPCRerror")
pcr_error_var_prop <- 0.1
max_mismatch <- 1
by_sample <- T
sample_prop <- 0.6
FilterPCRerror_df1_6 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df1_6 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr1_06_out.csv", sep=""), sep=sep)
comp_FilterPCRerror1_6 <- compare_df(FilterPCRerror_df1_6, FilterPCRerror_exp_df1_6, step="FilterPCRerror")
pcr_error_var_prop <- 0.1
max_mismatch <- 2
by_sample <- T
sample_prop <- 0.3
FilterPCRerror_df2 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df2 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr2_03_out.csv", sep=""), sep=sep)
comp_FilterPCRerror_2 <- compare_df(FilterPCRerror_df2, FilterPCRerror_exp_df2, step="FilterPCRerror")
### FilterChimera
test_input_file_cim <- paste(test_dir, "test/test_file2.csv", sep="")
input_df_chim <- read_asv_table(filename=test_input_file_cim, sep=sep)
abskew=10
by_sample = T
sample_prop = 0.3
FilterChimera_10_03_df <- FilterChimera(input_df_chim, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew, sep=sep)
FilterChimera_10_03_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_chimera_out_03_10.csv", sep=""), sep=sep)
comp_FilterChimera_10_03 <- compare_df(FilterChimera_10_03_df, FilterChimera_10_03_exp_df, step="FilterChimera")
abskew=10
by_sample = T
sample_prop = 0.6
FilterChimera_10_06_df <- FilterChimera(input_df_chim, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew, sep=sep)
FilterChimera_10_06_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_chimera_out_06_10.csv", sep=""), sep=sep)
comp_FilterChimera_10_06 <- compare_df(FilterChimera_10_06_df, FilterChimera_10_06_exp_df, step="FilterChimera")
### FilterRenkonen
renkonen_distance_quantile = 0.9
FilterRenkonen_df <- FilterRenkonen(input_df, renkonen_distance_quantile=renkonen_distance_quantile, sep=sep)
FilterRenkonen_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_FilterRenkonen_09_out.csv", sep=""), sep=sep)
comp_FilterRenkonen <- compare_df(FilterRenkonen_df, FilterRenkonen_exp_df, step="FilerRenkonen")
renkonen_distance_quantile = 0.8
FilterRenkonen_df <- FilterRenkonen(input_df, renkonen_distance_quantile=renkonen_distance_quantile, sep=sep)
FilterRenkonen_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_FilterRenkonen_08_out.csv", sep=""), sep=sep)
comp_FilterRenkonen <- compare_df(FilterRenkonen_df, FilterRenkonen_exp_df, step="FilerRenkonen")
### FilerIndel
FilterIndel_df <- FilterIndel(input_df, sep=sep)
FilterIndel_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_indel_out.csv", sep=""), sep=sep)
comp_FilterIndel <- compare_df(FilterIndel_df, FilterIndel_exp_df, step="FilterIndel")
### FilerCodonStop
genetic_code = 5
FilterCodonStop_df <- FilterCodonStop(input_df, genetic_code=genetic_code, sep=sep)
FilterCodonStop_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_stop_out.csv", sep=""), sep=sep)
comp_FilterCodonStop <- compare_df(FilterCodonStop_df, FilterCodonStop_exp_df, step="FilterCodonStop")
### PoolReplicates
digits = 0
PoolReplicates_df <- PoolReplicates(input_df, digits=digits, sep=sep)
PoolReplicates_exp_df <- read_asv_table_sample(filename=paste(test_dir, "test/test_file_pool_replicate_out.csv", sep=""), sep=sep)
PoolReplicates_exp_df <- PoolReplicates_exp_df %>% rename("asv_id"=seq_id)
comp_PoolReplicates <- compare_df_sample(PoolReplicates_df, PoolReplicates_exp_df, step="PoolReplicates")
}
test_filters(test_dir="vtamR_test/", vsearch_path=vsearch_path, sep=sep)
test_filters <- function(test_dir="~/vtamR/vtamR_test/", vsearch_path="", sep=","){
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep) %>%
rename("asv_id"=seq_id)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, sep=sep)
global_read_count_cutoff_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
comp_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, step="LFN_global_read_count")
input_df_tmp <- input_df %>%
select(-asv_id)
### LFN_filters
# LFN_read_count
lfn_read_count_cutoff <- 10
lfn_read_count_df <- LFN_read_count(input_df_tmp, cutoff=lfn_read_count_cutoff, sep=sep)
lfn_read_count_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_min_read_count_out.csv", sep=""), sep=sep)
comp_LFN_read_count <- compare_df(lfn_read_count_df, lfn_read_count_exp_df, step="LFN_read_count")
# LFN_sample_replicate (by column)
lfn_sample_replicate_cutoff <- 0.001
lnf_sample_replicate_df <- LFN_sample_replicate(input_df_tmp, cutoff=lfn_sample_replicate_cutoff, sep=sep)
lnf_sample_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_sample_replicate_out.csv", sep=""), sep=sep)
comp_LFN_sample_replicate <- compare_df(lnf_sample_replicate_df, lnf_sample_replicate_exp_df, step="LFN_sample_replicate")
# LFN_variant_replicate (by line)
lnf_variant_cutoff = 0.002
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate=by_replicate, sep=sep, min_read_count_prop=0.7)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate002_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
# LFN_variant (by line)
lnf_variant_cutoff = 0.002
by_replicate = FALSE
lnf_variant_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate=by_replicate, sep=sep, min_read_count_prop=0.7)
lnf_variant_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant002_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lnf_variant_df, lnf_variant_exp_df, step="LFN_variant")
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
lfn_pool_df <- pool_LFN(lfn_read_count_df, lnf_sample_replicate_df, lnf_variant_df, sep=sep)
lnf_pool_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_pool_LFN_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lfn_pool_df, lnf_pool_exp_df, step="pool_LFN")
### keep repeatable occurrences
min_replicate_number <- 2
FilterMinReplicateNumber_df <- FilterMinReplicateNumber(input_df, min_replicate_number, sep=sep)
FilterMinReplicateNumber_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_repeat_out.csv", sep=""), sep=sep)
comp_FilterMinReplicateNumber <- compare_df(FilterMinReplicateNumber_df, FilterMinReplicateNumber_exp_df, step="FilterMinReplicateNumber")
### FilterPCRerror
pcr_error_var_prop <- 0.1
max_mismatch <- 1
by_sample <- T
sample_prop <- 0.3
FilterPCRerror_df1 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df1 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr1_03_out.csv", sep=""), sep=sep)
comp_FilterPCRerror1 <- compare_df(FilterPCRerror_df1, FilterPCRerror_exp_df1, step="FilterPCRerror")
pcr_error_var_prop <- 0.1
max_mismatch <- 1
by_sample <- T
sample_prop <- 0.6
FilterPCRerror_df1_6 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df1_6 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr1_06_out.csv", sep=""), sep=sep)
comp_FilterPCRerror1_6 <- compare_df(FilterPCRerror_df1_6, FilterPCRerror_exp_df1_6, step="FilterPCRerror")
pcr_error_var_prop <- 0.1
max_mismatch <- 2
by_sample <- T
sample_prop <- 0.3
FilterPCRerror_df2 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df2 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr2_03_out.csv", sep=""), sep=sep)
comp_FilterPCRerror_2 <- compare_df(FilterPCRerror_df2, FilterPCRerror_exp_df2, step="FilterPCRerror")
### FilterChimera
test_input_file_cim <- paste(test_dir, "test/test_file2.csv", sep="")
input_df_chim <- read_asv_table(filename=test_input_file_cim, sep=sep)
abskew=10
by_sample = T
sample_prop = 0.3
FilterChimera_10_03_df <- FilterChimera(input_df_chim, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew, sep=sep)
FilterChimera_10_03_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_chimera_out_03_10.csv", sep=""), sep=sep)
comp_FilterChimera_10_03 <- compare_df(FilterChimera_10_03_df, FilterChimera_10_03_exp_df, step="FilterChimera")
abskew=10
by_sample = T
sample_prop = 0.6
FilterChimera_10_06_df <- FilterChimera(input_df_chim, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew, sep=sep)
FilterChimera_10_06_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_chimera_out_06_10.csv", sep=""), sep=sep)
comp_FilterChimera_10_06 <- compare_df(FilterChimera_10_06_df, FilterChimera_10_06_exp_df, step="FilterChimera")
### FilterRenkonen
renkonen_distance_quantile = 0.9
FilterRenkonen_df <- FilterRenkonen(input_df, renkonen_distance_quantile=renkonen_distance_quantile, sep=sep)
FilterRenkonen_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_FilterRenkonen_09_out.csv", sep=""), sep=sep)
comp_FilterRenkonen <- compare_df(FilterRenkonen_df, FilterRenkonen_exp_df, step="FilerRenkonen")
renkonen_distance_quantile = 0.8
FilterRenkonen_df <- FilterRenkonen(input_df, renkonen_distance_quantile=renkonen_distance_quantile, sep=sep)
FilterRenkonen_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_FilterRenkonen_08_out.csv", sep=""), sep=sep)
comp_FilterRenkonen <- compare_df(FilterRenkonen_df, FilterRenkonen_exp_df, step="FilerRenkonen")
### FilerIndel
FilterIndel_df <- FilterIndel(input_df, sep=sep)
FilterIndel_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_indel_out.csv", sep=""), sep=sep)
comp_FilterIndel <- compare_df(FilterIndel_df, FilterIndel_exp_df, step="FilterIndel")
### FilerCodonStop
genetic_code = 5
FilterCodonStop_df <- FilterCodonStop(input_df, genetic_code=genetic_code, sep=sep)
FilterCodonStop_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_stop_out.csv", sep=""), sep=sep)
comp_FilterCodonStop <- compare_df(FilterCodonStop_df, FilterCodonStop_exp_df, step="FilterCodonStop")
### PoolReplicates
digits = 0
PoolReplicates_df <- PoolReplicates(input_df, digits=digits, sep=sep)
PoolReplicates_exp_df <- read_asv_table_sample(filename=paste(test_dir, "test/test_file_pool_replicate_out.csv", sep=""), sep=sep)
PoolReplicates_exp_df <- PoolReplicates_exp_df %>% rename("asv_id"=seq_id)
comp_PoolReplicates <- compare_df_sample(PoolReplicates_df, PoolReplicates_exp_df, step="PoolReplicates")
}
test_filters(test_dir="vtamR_test/", vsearch_path=vsearch_path, sep=sep)
test_filters <- function(test_dir="~/vtamR/vtamR_test/", vsearch_path="", sep=","){
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep) %>%
rename("asv_id"=seq_id)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, sep=sep)
global_read_count_cutoff_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
comp_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, step="LFN_global_read_count")
input_df_tmp <- input_df %>%
select(-asv_id)
### LFN_filters
# LFN_read_count
lfn_read_count_cutoff <- 10
lfn_read_count_df <- LFN_read_count(input_df_tmp, cutoff=lfn_read_count_cutoff, sep=sep)
lfn_read_count_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_min_read_count_out.csv", sep=""), sep=sep)
comp_LFN_read_count <- compare_df(lfn_read_count_df, lfn_read_count_exp_df, step="LFN_read_count")
# LFN_sample_replicate (by column)
lfn_sample_replicate_cutoff <- 0.001
lnf_sample_replicate_df <- LFN_sample_replicate(input_df_tmp, cutoff=lfn_sample_replicate_cutoff, sep=sep)
lnf_sample_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_sample_replicate_out.csv", sep=""), sep=sep)
comp_LFN_sample_replicate <- compare_df(lnf_sample_replicate_df, lnf_sample_replicate_exp_df, step="LFN_sample_replicate")
# LFN_variant_replicate (by line)
lnf_variant_cutoff = 0.002
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df, cutoff=lnf_variant_cutoff, by_replicate=by_replicate, sep=sep, min_read_count_prop=0.7)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate002_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
# LFN_variant (by line)
lnf_variant_cutoff = 0.002
by_replicate = FALSE
lnf_variant_df <- LFN_variant(input_df, cutoff=lnf_variant_cutoff, by_replicate=by_replicate, sep=sep, min_read_count_prop=0.7)
lnf_variant_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant002_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lnf_variant_df, lnf_variant_exp_df, step="LFN_variant")
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
lfn_pool_df <- pool_LFN(lfn_read_count_df, lnf_sample_replicate_df, lnf_variant_df, sep=sep)
lnf_pool_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_pool_LFN_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lfn_pool_df, lnf_pool_exp_df, step="pool_LFN")
### keep repeatable occurrences
min_replicate_number <- 2
FilterMinReplicateNumber_df <- FilterMinReplicateNumber(input_df, min_replicate_number, sep=sep)
FilterMinReplicateNumber_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_repeat_out.csv", sep=""), sep=sep)
comp_FilterMinReplicateNumber <- compare_df(FilterMinReplicateNumber_df, FilterMinReplicateNumber_exp_df, step="FilterMinReplicateNumber")
### FilterPCRerror
pcr_error_var_prop <- 0.1
max_mismatch <- 1
by_sample <- T
sample_prop <- 0.3
FilterPCRerror_df1 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df1 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr1_03_out.csv", sep=""), sep=sep)
comp_FilterPCRerror1 <- compare_df(FilterPCRerror_df1, FilterPCRerror_exp_df1, step="FilterPCRerror")
pcr_error_var_prop <- 0.1
max_mismatch <- 1
by_sample <- T
sample_prop <- 0.6
FilterPCRerror_df1_6 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df1_6 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr1_06_out.csv", sep=""), sep=sep)
comp_FilterPCRerror1_6 <- compare_df(FilterPCRerror_df1_6, FilterPCRerror_exp_df1_6, step="FilterPCRerror")
pcr_error_var_prop <- 0.1
max_mismatch <- 2
by_sample <- T
sample_prop <- 0.3
FilterPCRerror_df2 <- FilterPCRerror(input_df, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch, by_sample=by_sample, sample_prop=sample_prop, sep=sep)
FilterPCRerror_exp_df2 = read_asv_table(filename=paste(test_dir, "test/test_file_pcr2_03_out.csv", sep=""), sep=sep)
comp_FilterPCRerror_2 <- compare_df(FilterPCRerror_df2, FilterPCRerror_exp_df2, step="FilterPCRerror")
### FilterChimera
test_input_file_cim <- paste(test_dir, "test/test_file2.csv", sep="")
input_df_chim <- read_asv_table(filename=test_input_file_cim, sep=sep)
abskew=10
by_sample = T
sample_prop = 0.3
FilterChimera_10_03_df <- FilterChimera(input_df_chim, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew, sep=sep)
FilterChimera_10_03_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_chimera_out_03_10.csv", sep=""), sep=sep)
comp_FilterChimera_10_03 <- compare_df(FilterChimera_10_03_df, FilterChimera_10_03_exp_df, step="FilterChimera")
abskew=10
by_sample = T
sample_prop = 0.6
FilterChimera_10_06_df <- FilterChimera(input_df_chim, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew, sep=sep)
FilterChimera_10_06_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_chimera_out_06_10.csv", sep=""), sep=sep)
comp_FilterChimera_10_06 <- compare_df(FilterChimera_10_06_df, FilterChimera_10_06_exp_df, step="FilterChimera")
### FilterRenkonen
renkonen_distance_quantile = 0.9
FilterRenkonen_df <- FilterRenkonen(input_df, renkonen_distance_quantile=renkonen_distance_quantile, sep=sep)
FilterRenkonen_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_FilterRenkonen_09_out.csv", sep=""), sep=sep)
comp_FilterRenkonen <- compare_df(FilterRenkonen_df, FilterRenkonen_exp_df, step="FilerRenkonen")
renkonen_distance_quantile = 0.8
FilterRenkonen_df <- FilterRenkonen(input_df, renkonen_distance_quantile=renkonen_distance_quantile, sep=sep)
FilterRenkonen_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_FilterRenkonen_08_out.csv", sep=""), sep=sep)
comp_FilterRenkonen <- compare_df(FilterRenkonen_df, FilterRenkonen_exp_df, step="FilerRenkonen")
### FilerIndel
FilterIndel_df <- FilterIndel(input_df, sep=sep)
FilterIndel_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_indel_out.csv", sep=""), sep=sep)
comp_FilterIndel <- compare_df(FilterIndel_df, FilterIndel_exp_df, step="FilterIndel")
### FilerCodonStop
genetic_code = 5
FilterCodonStop_df <- FilterCodonStop(input_df, genetic_code=genetic_code, sep=sep)
FilterCodonStop_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_stop_out.csv", sep=""), sep=sep)
comp_FilterCodonStop <- compare_df(FilterCodonStop_df, FilterCodonStop_exp_df, step="FilterCodonStop")
### PoolReplicates
digits = 0
PoolReplicates_df <- PoolReplicates(input_df, digits=digits, sep=sep)
PoolReplicates_exp_df <- read_asv_table_sample(filename=paste(test_dir, "test/test_file_pool_replicate_out.csv", sep=""), sep=sep)
PoolReplicates_exp_df <- PoolReplicates_exp_df %>% rename("asv_id"=seq_id)
comp_PoolReplicates <- compare_df_sample(PoolReplicates_df, PoolReplicates_exp_df, step="PoolReplicates")
}
test_filters(test_dir="vtamR_test/", vsearch_path=vsearch_path, sep=sep)
test_make_known_occurrences(test_dir="vtamR_test/", sep=sep)
test_taxassign(test_dir="vtamR_test/", sep=sep, blast_path=blast_path, blast_db=blast_db, taxonomy=taxonomy, num_threads=num_threads)
test_optimize(test_dir="vtamR_test/", vsearch_path=vsearch_path)
library("ggplot2")
library("ggplot2")
View(read_count_df)
gglot(mtcars, aes(x=factor(cyl), fill = factor(cyl)))
###
# Graphs
###
ggplot(mtcars, aes(x=factor(cyl), fill = factor(cyl)))
###
# Graphs
###
ggplot(mtcars, aes(x=factor(cyl), fill = factor(cyl))) +
geaom_bar()
###
# Graphs
###
ggplot(mtcars, aes(x=factor(cyl), fill = factor(cyl))) +
geom_bar()
mtcars
class(mtcars)
barplot(table(mtcars$cyl))
ggplot(mtcars, aes(x=factor(cyl))) +
geom_bar()
barplot(table(mtcars$cyl))
class(mtcars$cyl)
class(table(mtcars$cyl))
# Build dataset with different distributions
data <- data.frame(
type = c( rep("variable 1", 1000), rep("variable 2", 1000) ),
value = c( rnorm(1000), rnorm(1000, mean=4) )
)
View(data)
# Represent it
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
View(read_count_df)
# Represent it
p <- read_count_df %>%
ggplot( aes(x=read_count, fill=sample)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
# Represent it
p <- read_count_df %>%
ggplot( aes(x=read_count, fill=sample)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
#  scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
df <- read_count_df %>%
group_by(sample) %>%
summarize("read_count" = sum(red_count))
p <- df %>%
ggplot( aes(x=read_count, fill=sample)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
#  scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
df <- read_count_df %>%
group_by(sample) %>%
summarize("read_count" = sum(red_count))
df <- read_count_df %>%
group_by(sample) %>%
summarize("read_count" = sum(red_count))
df <- read_count_df %>%
group_by(sample) %>%
summarize("read_count" = sum(read_count))
View(df)
p <- df %>%
ggplot( aes(x=read_count, fill=sample)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
#  scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
p <- df %>%
ggplot( aes(x=read_count, fill=sample)) +
geom_histogram() +
#  scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
p <- df %>%
ggplot( aes(x=read_count, fill=sample)) +
geom_bar() +
#  scale_fill_manual(values=c("#69b3a2", "#404080")) +
#  theme_ipsum() +
labs(fill="")
p
View(df)
