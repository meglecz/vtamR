print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
update_asv_list <- function(read_count_df, asv_list=asv_list){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
}
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
update_asv_list <- function(read_count_df, asv_list=asv_list){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
#  asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
}
update_asv_list(read_count_df, asv_list=asv_list)
update_asv_list <- function(read_count_df, asv_list=asv_list){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
#  asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
str <- paste("_", trunc(as.numeric(trunc(Sys.time()))), ".", sep="")
new_file <- sub("\\.", str, asv_list)
write.table(asv_df, file=new_file, row.names = FALSE, sep=sep)
}
update_asv_list(read_count_df, asv_list=asv_list)
update_asv_list <- function(read_count_df, asv_list=asv_list, otufile=""){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
#  asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
if(outfile == ""){
str <- paste("_", trunc(as.numeric(trunc(Sys.time()))), ".", sep="")
outfile <- sub("\\.", str, asv_list)
}
write.table(asv_df, file=outfile, row.names = FALSE, sep=sep)
}
update_asv_list(read_count_df, asv_list=asv_list)
asv_list
update_asv_list <- function(read_count_df, asv_list=asv_list, otufile=""){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
#  asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
if(outfile == ""){
str <- paste("_", trunc(as.numeric(trunc(Sys.time()))), ".", sep="")
outfile <- sub("\\.", str, asv_list)
}
write.table(asv_df, file=outfile, row.names = FALSE, sep=sep)
}
update_asv_list <- function(read_count_df, asv_list=asv_list, otufile=""){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
#  asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
if(outfile == ""){
str <- paste("_", trunc(as.numeric(trunc(Sys.time()))), ".", sep="")
outfile <- sub("\\.", str, asv_list)
}
write.table(asv_df, file=outfile, row.names = FALSE, sep=sep)
}
update_asv_list(read_count_df, asv_list=asv_list)
update_asv_list(read_count_df, asv_list=asv_list)
asv_list
update_asv_list <- function(read_count_df, asv_list=asv_list, outfile=""){
# read earlier ASV list
if(asv_list != ""){  # read already existing asvs, if the file is given
asv_df <- read.csv(asv_list, sep=sep, header=TRUE)
}else{
asv_df <- data.frame("asv_id"=integer(),
"asv"=as.character()
)
}
#  asv_df[2,1] <- 1
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in input asv_list")
}
# make a dataframe with the unique combinations of asv_id-asv
new_df <- read_count_df %>%
select(asv_id, asv) %>%
distinct()
if(check_one_to_one_relationship(new_df)){
print("One to one relationship between asv_id and asv in input read_count_df")
}
# pool earlier asvs and new ones ad avoid redundancy
asv_df <- rbind(asv_df, new_df) %>%
distinct() %>%
arrange(asv_id)
if(check_one_to_one_relationship(asv_df)){
print("One to one relationship between asv_id and asv in output asv_list")
}
if(outfile == ""){
str <- paste("_", trunc(as.numeric(trunc(Sys.time()))), ".", sep="")
outfile <- sub("\\.", str, asv_list)
}
write.table(asv_df, file=outfile, row.names = FALSE, sep=sep)
}
update_asv_list(read_count_df, asv_list=asv_list)
update_asv_list(read_count_df, asv_list=asv_list)
o
outfile <-  paste(outdir, "updated_asv_list.csv", sep="")
update_asv_list(read_count_df, asv_list=asv_list, outfile=outfile)
computer <- "Bombyx" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
#fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
#fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
#outdir <- "/home/meglecz/vtamR_large_files/out/"
#mock_composition <- "local/user_input/mock_composition_mfzr_prerun.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "/home/emese/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#  fastqdir <- "local/fastq/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_mfzr_gz.csv"
outdir <- "vtamR_test/out/"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr_gz.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr_eu.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
# create the output directory and check the the slash at the end
outdir <- check_dir(dir=outdir)
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
###
### SortReads
###
sorted_dir <- paste(outdir, "sorted/", sep="")
###
### Read input fasta files, dereplicate reads to ASV, and count the number of reads of each ASV in each sample-replicate, add a unique id for ASVs, can take into account ASVs from earlier analyses
###
outfile <- paste(outdir, "1_before_filter.csv", sep="")
sortedinfo_df <- read.csv(paste(sorted_dir, "sortedinfo.csv", sep =""), sep=sep)
read_count_df <- read_fastas_from_fileinfo(sortedinfo_df, dir=sorted_dir, outfile=outfile, sep=sep, asv_list=asv_list)
read_count_df_backup <- read_count_df
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
update_asv_list(read_count_df, asv_list=asv_list)
###
# Add ASVs that passed Swarm to the asv_list file, it can be used latter to homogenize later runs with asv_ids of this
###
update_asv_list(read_count_df, asv_list=asv_list)
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
View(stat_df)
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
read_count_df <- read_count_df_backup
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
# Run swarm
###
swarm_d <- 1
fastidious <- TRUE
by_sample <- TRUE
outfile <- paste(outdir, "2_swarm.csv", sep="")
read_count_df <- swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, swarm_d=swarm_d, fastidious=fastidious, write_csv=T, sep=sep, by_sample=by_sample)
params <- paste(swarm_d, fastidious, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="swarm", params=params)
