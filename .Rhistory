df$sequence <- tolower(df$sequence)
}
return(df)
}
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, dereplicate=F)
read_fasta_local <- function(filename, use_id=F, case="", dereplicate=F){
if(endsWith(filename, ".gz")){
file_connection <- gzfile(filename, "rb")
}else{
file_connection <- file(filename, "r")
}
df <- data.frame( seq_id=character(0),
sequence=character(0))
id <- NA
seq <- ""
bool <- F
while (length(line <- readLines(file_connection, n = 1)) > 0) {
if(startsWith(line, ">")){
if(!(is.na(id))){
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
seq <- ""
}
id <- sub(">", "", line)
}else {
seq <- paste(seq, line, sep="")
}
}
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
close(file_connection)
if(use_id==F){
df <- df %>%
select(sequence)
}
if(case=="uc"){
df$sequence <- toupper(df$sequence)
} else if(case=="lc"){
df$sequence <- tolower(df$sequence)
}
return(df)
}
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, dereplicate=F)
View(my_df)
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc" dereplicate=F)
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc", dereplicate=F)
View(my_df)
if(endsWith(filename, ".gz")){
file_connection <- gzfile(filename, "rb")
}else{
file_connection <- file(filename, "r")
}
df <- data.frame( seq_id=character(0),
sequence=character(0))
id <- NA
seq <- ""
bool <- F
while (length(line <- readLines(file_connection, n = 1)) > 0) {
if(startsWith(line, ">")){
if(!(is.na(id))){
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
seq <- ""
}
id <- sub(">", "", line)
}else {
seq <- paste(seq, line, sep="")
}
}
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
close(file_connection)
if(use_id==F){
df <- df %>%
select(sequence)
}
if(case=="uc"){
df$sequence <- toupper(df$sequence)
} else if(case=="lc"){
df$sequence <- tolower(df$sequence)
}
View(df)
if(dereplicate){
df <- df %>%
group_by(sequence) %>%
summarize(read_count=length(sequence))
}
View(df)
if(endsWith(filename, ".gz")){
file_connection <- gzfile(filename, "rb")
}else{
file_connection <- file(filename, "r")
}
df <- data.frame( seq_id=character(0),
sequence=character(0))
id <- NA
seq <- ""
bool <- F
while (length(line <- readLines(file_connection, n = 1)) > 0) {
if(startsWith(line, ">")){
if(!(is.na(id))){
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
seq <- ""
}
id <- sub(">", "", line)
}else {
seq <- paste(seq, line, sep="")
}
}
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
close(file_connection)
View(df)
if(dereplicate){
df <- df %>%
group_by(sequence)
}
df <- df %>%
group_by(sequence)
View(df)
read_fasta_local <- function(filename, use_id=F, case="", dereplicate=F){
if(endsWith(filename, ".gz")){
file_connection <- gzfile(filename, "rb")
}else{
file_connection <- file(filename, "r")
}
df <- data.frame( seq_id=character(0),
sequence=character(0))
id <- NA
seq <- ""
bool <- F
while (length(line <- readLines(file_connection, n = 1)) > 0) {
if(startsWith(line, ">")){
if(!(is.na(id))){
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
seq <- ""
}
id <- sub(">", "", line)
}else {
seq <- paste(seq, line, sep="")
}
}
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
close(file_connection)
if(use_id==F){
df <- df %>%
select(sequence)
}
if(case=="uc"){
df$sequence <- toupper(df$sequence)
} else if(case=="lc"){
df$sequence <- tolower(df$sequence)
}
if(dereplicate){
df <- df %>%
group_by(sequence) %>%
summarize(read_count=length(sequence))
}
return(df)
}
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc", dereplicate=T)
View(my_df)
read_fasta_local <- function(filename, use_id=F, case="", dereplicate=F){
if(endsWith(filename, ".gz")){
file_connection <- gzfile(filename, "rb")
}else{
file_connection <- file(filename, "r")
}
df <- data.frame( seq_id=character(0),
sequence=character(0))
id <- NA
seq <- ""
bool <- F
while (length(line <- readLines(file_connection, n = 1)) > 0) {
if(startsWith(line, ">")){
if(!(is.na(id))){
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
seq <- ""
}
id <- sub(">", "", line)
}else {
seq <- paste(seq, line, sep="")
}
}
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
close(file_connection)
if(use_id==F){
df <- df %>%
select(sequence)
}
if(case=="uc"){
df$sequence <- toupper(df$sequence)
} else if(case=="lc"){
df$sequence <- tolower(df$sequence)
}
if(dereplicate){
df <- df %>%
group_by(sequence) %>%
summarize(read_count=length(sequence))
}
return(df)
}
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc", dereplicate=T)
View(df_tmp)
read_fasta_local <- function(filename, use_id=F, case="", dereplicate=F){
if(endsWith(filename, ".gz")){
file_connection <- gzfile(filename, "rb")
}else{
file_connection <- file(filename, "r")
}
df <- data.frame( seq_id=character(0),
sequence=character(0))
id <- NA
seq <- ""
bool <- F
while (length(line <- readLines(file_connection, n = 1)) > 0) {
if(startsWith(line, ">")){
if(!(is.na(id))){
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
seq <- ""
}
id <- sub(">", "", line)
}else {
seq <- paste(seq, line, sep="")
}
}
df_tmp <- data.frame( seq_id=id,sequence=seq)
df <- rbind(df, df_tmp)
close(file_connection)
if(use_id==F){
df <- df %>%
select(sequence)
}
if(case=="uc"){
df$sequence <- toupper(df$sequence)
} else if(case=="lc"){
df$sequence <- tolower(df$sequence)
}
if(dereplicate){
df <- df %>%
group_by(sequence) %>%
summarize(read_count=length(sequence))
}
return(df)
}
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc", dereplicate=T)
View(my_df)
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=T, case="uc", dereplicate=T)
View(my_df)
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=T, case="uc", dereplicate=F)
View(my_df)
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc", dereplicate=F)
View(my_df)
my_df <- read_fasta_local(filename="/home/meglecz/vtamR/local/small_test/small_test1_1.fas", use_id=F, case="uc", dereplicate=T)
View(my_df)
vtamRseq <- read_fasta_local(filename=vtamRf, use_id=F, case="uc", dereplicate=F) %>%
arrange(sequence)
vtamRseq <- read_fasta_local(filename=vtamRf, use_id=F, case="uc", dereplicate=F)
View(vtamRseq)
vtamRseq <- vtamRseq %>% arrange(sequence)
vtamseq <- read_fasta_local(filename=vtamf, use_id=F, case="uc", dereplicate=T)
vtamseq <- vtamseq %>% arrange(sequence)
View(vtamseq)
if(!(identical(vtamRseq, vtamseq))){# the sequences differ between the two files
setwd(backup_wd)
stop(paste(vtamRf, "and", vtamf, "are not identical"))
}
###
# run Sortreads using the same parameters as vtam
fastainfo_df <- read.csv("vtamR_test/test_merge/fastainfo.csv", header=T, sep=sep)
sorted_dir <- "vtamR_test/test_sorted/"
check_reverse <- T
tag_to_end <- F
primer_to_end <-F
cutadapt_error_rate <- 0.1 # -e in cutadapt
cutadapt_minimum_length <- 50 # -m in cutadapt
cutadapt_maximum_length <- 500 # -M in cutadapt
compress <- "0"
fileinfo_df <- SortReads(fastainfo_df=fastainfo_df, fastadir=outdir, outdir=sorted_dir, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, tag_to_end=tag_to_end, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length, sep=sep, compress=compress)
vtamR_csv <-  paste(sorted_dir, "fastainfo.csv", sep="")
### compare output
vtam_out <-  "vtamR_test/vtam_sorted/"
vtam_csv <-  "vtamR_test/vtam_sorted/sortedinfo.tsv"
fastainfo_vtam_df <- read.csv(vtam_csv, header=T, sep="\t")
fastainfo_vtam_df$run <- "plate1"
fastainfo_vtam_df$sample <- sub("_run1", "", fastainfo_vtam_df$sample)
fastainfo_vtam_df <- fastainfo_vtam_df %>% rename(plate = run)
df <- full_join(fastainfo_vtam_df, fileinfo_df, by=c("plate", "marker", "sample", "replicate"))
# check if all output files are present
if(any(is.na(df$sortedfasta)) | any(is.na(df$filename))){
setwd(backup_wd)
vtam_missing <- df %>%
filter(is.na(sortedfasta))
print(vtam_missing)
vtamR_missing <- df %>%
filter(is.na(filename))
print(vtamR_missing)
stop("Some output files are missing")
}
#
for(i in 1:nrow(df)){
vtamRf <- paste(sorted_dir, df$filename[i], sep="")
vtamf <- paste(vtam_out, df$sortedfasta[i], sep="")
print(vtamRf)
vtamRseq <- read_fasta_local(filename=vtamRf, use_id=F, case="uc", dereplicate=T)
vtamRseq <- vtamRseq %>% arrange(sequence)
vtamseq <- read_fasta_local(filename=vtamf, use_id=F, case="uc", dereplicate=T)
vtamseq <- vtamseq %>% arrange(sequence)
if(!(identical(vtamRseq, vtamseq))){# the sequences differ between the two files
setwd(backup_wd)
stop(paste(vtamRf, "and", vtamf, "are not identical"))
}
}
sum(vtamseq$read_count)
sum(vtamRseq$read_count)
#
for(i in 1:nrow(df)){
vtamRf <- paste(sorted_dir, df$filename[i], sep="")
vtamf <- paste(vtam_out, df$sortedfasta[i], sep="")
print(vtamRf)
vtamRseq <- read_fasta_local(filename=vtamRf, use_id=F, case="uc", dereplicate=T)
vtamRseq <- vtamRseq %>% arrange(sequence)
vtamseq <- read_fasta_local(filename=vtamf, use_id=F, case="uc", dereplicate=T)
vtamseq <- vtamseq %>% arrange(sequence)
if(!(identical(vtamRseq, vtamseq))){# the sequences differ between the two files
setwd(backup_wd)
stop(paste(vtamRf, "and", vtamf, "are not identical"))
}
}
computer <- "Bombyx" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
setwd("~/vtamR")
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastqdir <- "local/fastq/"
num_threads=8
} else if (computer == "Endoume"){
setwd("~/vtamR")
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path="" # deactivate conda
db_path= "/home/emese/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "local/fastq/"
num_threads=8
}else if (computer == "Windows"){
setwd("C:/Users/emese/vtamR/")
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
num_threads=4
}
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
####
# define input filenames
#fastadir <- "local/small_test"
#fileinfo <- "local/user_input/fileinfo_small.csv"
fastqinfo <- "local/user_input/fastqinfo_mfzr_eu.csv"
fastadir <- "local/mfzr/sorted/"
fileinfo <- "local/user_input/fileinfo_mfzr_eu.csv"
mock_composition <- "local/user_input/mock_composition_mfzr_eu.csv"
sep=";"
#fastadir <- "/home/meglecz/vtam_benchmark_local/vtam_fish/sorted_mfzr/"
#fileinfo <-"/home/meglecz/vtam_benchmark_local/vtam_fish/sorted_mfzr/fileinfo_vtamr.csv"
#mock_composition <- "/home/meglecz/vtamR/local/user_input/mock_composition_mfzr_prerun.csv"
#sep="\t"
#fastadir <- "/home/meglecz/vtam_benchmark_local/vtam_bat/fasta/"
#fileinfo <- "/home/meglecz/vtam_benchmark_local/vtam_bat/fasta/fileinfo_vtamr.csv"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="local/out")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
test_merge <- function(vsearch_path=vsearch_path){
backup_wd <- getwd()
#  check_dir(test_dir)
setwd("~/vtamR")
###
# run Merge using the same parameters as vtam
fastqinfo_df <- read.csv("vtamR_test/test_input/fastqinfo_mfzr_eu.csv", header=T, sep=sep)
fastqdir <- "local/fastq/"
outdir <- "vtamR_test/test_merge/"
fastq_ascii <- 33 #
fastq_maxdiffs <- 10 #
fastq_maxee <- 1 #
fastq_minlen <- 50 #
fastq_maxlen <- 90000 #
fastq_minmergelen <- 100 #
fastq_maxmergelen <-500 #
fastq_maxns <- 0 #
fastq_truncqual <- 10 #
fastq_minovlen <- 50 #
fastq_allowmergestagger <- F #
sep <- ";"
compress <- 0
fastainfo_df <- Merge(fastqinfo_df=fastqinfo_df, fastqdir=fastqdir, vsearch_path=vsearch_path, outdir=outdir, fastq_ascii=fastq_ascii, fastq_maxdiffs=fastq_maxdiffs, fastq_maxee=fastq_maxee, fastq_minlen=fastq_minlen, fastq_maxlen=fastq_maxlen, fastq_minmergelen=fastq_minmergelen, fastq_maxmergelen=fastq_maxmergelen, fastq_maxns=fastq_maxns, fastq_truncqual=fastq_truncqual, fastq_minovlen=fastq_minovlen, fastq_allowmergestagger=fastq_allowmergestagger, sep=sep, compress=compress)
### compare results to precomputed files by vtam
vtam_out <- "vtamR_test/vtam_merged/"
vtamfiles <- list.files(path = vtam_out, pattern = "\\.fasta$")
vtamRfiles <- list.files(path = outdir, pattern = "\\.fasta$")
if(length(vtamfiles) == length(vtamRfiles)){# same number of files
for(vtamf in vtamfiles){ # go through all files in vtamf
#      vtamf = "mfzr_1_fw.fasta"
vtamRf <- paste(outdir, vtamf, sep="")
vtamf <- paste(vtam_out, vtamf, sep="")
if(file.exists(vtamRf)){ # corresponding file exists for vtamR
#        vtamRseq <- as.matrix(read.fasta(vtamRf, seqonly = T))
#       vtamseq <- as.matrix(read.fasta(vtamf, seqonly = T))
vtamRseq <- read.fasta(vtamRf, seqonly = T)
vtamseq <- read.fasta(vtamf, seqonly = T)
#colnames(vtamseq) <- c("asv")
#vtamseq <- vtamseq %>% arrange(asv)
#        if(!(identical(vtamRseq[,1], vtamseq[,1]))){# the sequences differ between the two files
if(!(identical(vtamRseq, vtamseq))){# the sequences differ between the two files
setwd(backup_wd)
stop(paste(vtamRf, "and", vtamf, "are not identical"))
}
}else{ # no corresponding to to vtam output
setwd(backup_wd)
stop(paste(vtamRf, "does not exists"))
}
}
print("PASS: The results are identical for vtam and vtamR")
}else{
setwd(backup_wd)
stop("Different number of output files for vtam and vtamR")
}
###
# run Sortreads using the same parameters as vtam
fastainfo_df <- read.csv("vtamR_test/test_merge/fastainfo.csv", header=T, sep=sep)
sorted_dir <- "vtamR_test/test_sorted/"
check_reverse <- T
tag_to_end <- F
primer_to_end <-F
cutadapt_error_rate <- 0.1 # -e in cutadapt
cutadapt_minimum_length <- 50 # -m in cutadapt
cutadapt_maximum_length <- 500 # -M in cutadapt
compress <- "0"
fileinfo_df <- SortReads(fastainfo_df=fastainfo_df, fastadir=outdir, outdir=sorted_dir, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, tag_to_end=tag_to_end, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length, sep=sep, compress=compress)
vtamR_csv <-  paste(sorted_dir, "fastainfo.csv", sep="")
### compare output
vtam_out <-  "vtamR_test/vtam_sorted/"
vtam_csv <-  "vtamR_test/vtam_sorted/sortedinfo.tsv"
fastainfo_vtam_df <- read.csv(vtam_csv, header=T, sep="\t")
fastainfo_vtam_df$run <- "plate1"
fastainfo_vtam_df$sample <- sub("_run1", "", fastainfo_vtam_df$sample)
fastainfo_vtam_df <- fastainfo_vtam_df %>% rename(plate = run)
df <- full_join(fastainfo_vtam_df, fileinfo_df, by=c("plate", "marker", "sample", "replicate"))
# check if all output files are present
if(any(is.na(df$sortedfasta)) | any(is.na(df$filename))){
setwd(backup_wd)
vtam_missing <- df %>%
filter(is.na(sortedfasta))
print(vtam_missing)
vtamR_missing <- df %>%
filter(is.na(filename))
print(vtamR_missing)
stop("Some output files are missing")
}
#
for(i in 1:nrow(df)){
vtamRf <- paste(sorted_dir, df$filename[i], sep="")
vtamf <- paste(vtam_out, df$sortedfasta[i], sep="")
print(vtamRf)
vtamRseq <- read_fasta_local(filename=vtamRf, use_id=F, case="uc", dereplicate=T)
vtamRseq <- vtamRseq %>% arrange(sequence)
vtamseq <- read_fasta_local(filename=vtamf, use_id=F, case="uc", dereplicate=T)
vtamseq <- vtamseq %>% arrange(sequence)
if(!(identical(vtamRseq, vtamseq))){# the sequences differ between the two files
setwd(backup_wd)
stop(paste(vtamRf, "and", vtamf, "are not identical"))
}
}
setwd(backup_wd)
}
test_merge(vsearch_path=vsearch_path)
