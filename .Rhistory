usethis::use_roxygen_md()
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
check_reverse <- F
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
check_reverse <- T
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
tag_to_end <- F
check_reverse <- T
compress <- F
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta.gz"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta.gz"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
outfile <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2_primertrimmed.fasta"
TrimPrimer(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
input <- paste(fasta_dir, fastainfo_df$fasta[i], sep="")
output <- paste(outdir, fastainfo_df$fasta[i], sep="")
if(compress && !endsWith(output, ".gz")){
output <- sub("\\..+", ".fasta.gz", output)
}
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
}
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
# load local packages
load_all(".")
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
input <- paste(fasta_dir, fastainfo_df$fasta[i], sep="")
output <- paste(outdir, fastainfo_df$fasta[i], sep="")
if(compress && !endsWith(output, ".gz")){
output <- sub("\\..+", ".fasta.gz", output)
}
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
}
fastainfo <- "/home/meglecz/vtamR/vtamR_test/data/fastainfo_notag.csv"
fasta_dir <- "vtamR_test/out/test_sortreads/no_tag/"
outdir <- "vtamR_test/out/test_sortreads/primer_trimmed/"
outdir <- check_dir(dir=outdir)
check_reverse <- T
primer_to_end <-F
cutadapt_error_rate <- 0.1 # -e in cutadapt
cutadapt_minimum_length <- 50 # -m in cutadapt
cutadapt_maximum_length <- 500 # -M in cutadapt
compress <- F
fasta <- "/home/meglecz/vtamR/vtamR_test/out/test_sortreads/no_tag/tagtrimmed-14ben01-2.fasta"
TrimPrimer(fastainfo, fasta_dir=merged_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fastainfo <- "/home/meglecz/vtamR/vtamR_test/data/fastainfo_notag.csv"
fasta_dir <- "vtamR_test/out/test_sortreads/no_tag/"
outdir <- "vtamR_test/out/test_sortreads/primer_trimmed/"
outdir <- check_dir(dir=outdir)
check_reverse <- T
primer_to_end <-F
cutadapt_error_rate <- 0.1 # -e in cutadapt
cutadapt_minimum_length <- 50 # -m in cutadapt
cutadapt_maximum_length <- 500 # -M in cutadapt
compress <- F
TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
compress <- T
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
input <- paste(fasta_dir, fastainfo_df$fasta[i], sep="")
output <- paste(outdir, fastainfo_df$fasta[i], sep="")
if(compress && !endsWith(output, ".gz")){
output <- sub("\\..+", ".fasta.gz", input)
}
fastainfo_df$fasta[i] <- output
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
input <- paste(fasta_dir, fastainfo_df$fasta[i], sep="")
output <- paste(outdir, fastainfo_df$fasta[i], sep="")
if(compress && !endsWith(output, ".gz")){
output <- sub("\\..+", ".fasta.gz", input)
}
fastainfo_df$fasta[i] <- output
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# defineoutput filename
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
fastainfo_df$fasta[i] <- output
}
input <- paste(fasta_dir, fastainfo_df$fasta[i], sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# define output file name
input <- fastainfo_df$fasta[i]
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
fastainfo_df$fasta[i] <- output
}
input <- paste(fasta_dir, input, sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
return(fastainfo_df)
}
TrimPrimer_OneFile(fasta, outfile=outfile, primer_fw="TCCACTAATCACAARGATATTGGTAC", primer_rv="WACTAATCAATTWCCAAATCCTCC", cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
View(fastainfo_df)
fastainfo
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
fastainfo_df
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# define output file name
input <- fastainfo_df$fasta[i]
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
}
fastainfo_df$filename[i] <- output
input <- paste(fasta_dir, input, sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
}
fastainfo_df <- fastainfo_df %>%
select(-fasta)
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
View(fastainfo_df)
#!!!!!!!!!!!!! OK, but add Read_count to output
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# define output file name
input <- fastainfo_df$fasta[i]
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
}
fastainfo_df$filename[i] <- output
input <- paste(fasta_dir, input, sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
seq_n <- count_seq(output)
fastainfo_df$read_count[i] <- seq_n
}
fastainfo_df <- fastainfo_df %>%
select(-fasta)
count_reads_dir(outdir, pattern=".fasta", file_type="fasta", outfile="", sep=",")
return(fastainfo_df)
}
#!!!!!!!!!!!!! OK, but add Read_count to output
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# define output file name
input <- fastainfo_df$fasta[i]
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
}
fastainfo_df$filename[i] <- output
input <- paste(fasta_dir, input, sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
seq_n <- count_seq(output)
fastainfo_df$read_count[i] <- seq_n
}
fastainfo_df <- fastainfo_df %>%
select(-fasta)
count_reads_dir(outdir, pattern=".fasta", file_type="fasta", outfile="", sep=",")
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
View(fastainfo_df)
colnames(fastainfo_df)
#!!!!!!!!!!!!! OK, but add Read_count to output
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# define output file name
input <- fastainfo_df$fasta[i]
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
}
fastainfo_df$filename[i] <- output
input <- paste(fasta_dir, input, sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
seq_n <- count_seq(output)
fastainfo_df$read_count[i] <- seq_n
}
fastainfo_df <- fastainfo_df %>%
select(sample, sample_type, habitat, replicate, filename, read_count)
count_reads_dir(outdir, pattern=".fasta", file_type="fasta", outfile="", sep=",")
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
View(fastainfo_df)
#!!!!!!!!!!!!! OK, but add Read_count to output
TrimPrimer <- function(fastainfo, fasta_dir="", outdir="", compress=F, cutadapt_path="", vsearch_path="", check_reverse=F, primer_to_end=T, cutadapt_error_rate=0.1, cutadapt_minimum_length=50, cutadapt_maximum_length=500){
# can accept df or file as an input
if(is.character(fastainfo)){
# read known occurrences
fastainfo_df <- read.csv(fastainfo, header=T, sep=sep)
}else{
fastainfo_df <- fastainfo
}
check_fileinfo(file=fastainfo_df, dir=fasta_dir, file_type="fastainfo", sep=sep)
# upper case for all primers and tags
fastainfo_df$primer_fw <- toupper(fastainfo_df$primer_fw)
fastainfo_df$primer_rv <- toupper(fastainfo_df$primer_rv)
# make a column for output filenames
fastainfo_df$filename <- NA
# check dirs
outdir <- check_dir(outdir)
fasta_dir<- check_dir(fasta_dir)
for(i in 1:nrow(fastainfo_df)){ # for each input fasta
# define output file name
input <- fastainfo_df$fasta[i]
output <- fastainfo_df$fasta[i]
if(compress && !endsWith(output, ".gz")){ # add .gz if necessary
output <- sub("\\..+", ".fasta.gz", output)
}
fastainfo_df$filename[i] <- output
input <- paste(fasta_dir, input, sep="")
output <- paste(outdir, output, sep="")
TrimPrimer_OneFile(input, outfile=output, primer_fw=fastainfo_df$primer_fw[i], primer_rv=fastainfo_df$primer_rv[i], cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
# count reads
seq_n <- count_seq(output)
fastainfo_df$read_count[i] <- seq_n
}
fastainfo_df <- fastainfo_df %>%
select(sample, sample_type, habitat, replicate, filename, read_count)
write.table(fastainfo_df, file = paste(outdir, "sortedinfo.csv", sep=""),  row.names = F, sep=sep)
return(fastainfo_df)
}
fastainfo_df <- TrimPrimer(fastainfo, fasta_dir=fasta_dir, outdir=outdir, compress=compress, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length)
