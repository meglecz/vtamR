library("devtools")
library("roxygen2")
library("seqinr") # splitseq for FilterCodonStop
library("dplyr")
library("tidyr") # gather for read_asv_table; pivot_wider in write_asvtable and stat_sample !!sym
library("utils") # to handle zipped files
library("ggplot2")
computer <- "Windows" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
#     fastqdir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
#    outdir <- "vtamR_test/out_zfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
#      asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
outdir <- "/home/meglecz/vtamR_large_files/out/"
mock_composition <- "/home/meglecz/vtamR_large_files/user_input/mock_composition_mfzr.csv"
asv_list <- "/home/meglecz/vtamR_large_files/user_input/asv_list.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#    fastqdir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
#     outdir <- "vtamR_test/out_mfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
#     asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastqdir <- "~/vtamR_large_data"
fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
outdir <- "/home/emese/vtamR_large_data/out/"
mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
###
# Test major functions
###
test_merge_and_sortreads(test_dir="vtamR_test/", vsearch_path=vsearch_path, cutadapt_path=cutadapt_path)
test_filters(test_dir="vtamR_test/", vsearch_path=vsearch_path, sep=sep)
test_make_known_occurrences(test_dir="vtamR_test/", sep=sep)
test_taxassign(test_dir="vtamR_test/", sep=sep, blast_path=blast_path, blast_db=blast_db, taxonomy=taxonomy, num_threads=num_threads)
test_optimize(test_dir="vtamR_test/", vsearch_path=vsearch_path)
file <- "vtamR_test/data/mfzr_1_fw.fastq.gz"
if(endsWith(file, ".zip")){
msg <- "File compression type is not supported"
print(msg)
return(0)
}
# Define the PowerShell command to count lines in the file
ps_command <- paste0("Get-Content '", file, "' | Measure-Object -Line | Select-Object -ExpandProperty Lines")
# Execute the PowerShell command and capture the output
line_count <- system(ps_command, intern = TRUE, ignore.stderr = TRUE)
ps_command
ps_command <- paste("Get-Content", shQuote(file), "| Measure-Object -Line | Select-Object -ExpandProperty Lines")
line_count <- system(ps_command, intern = TRUE, ignore.stderr = TRUE) # Execute the PowerShell command using system
cmd <- paste("findstr /R /N '^' ", shQuote(file), " | find /c ':'", collapse = "")
line_count <- system(cmd, intern = TRUE, ignore.stderr = TRUE)
cmd
cmd <- paste("findstr /R /N '^' ", shQuote(file), collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
file <- "vtamR_test/data/asv_list_zfzr.csv"
cmd <- paste("findstr /R /N '^' ", shQuote(file), collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
cmd <- paste("findstr /N '^' ", shQuote(file), collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
cmd <- paste("findstr /N '^' /f:", shQuote(file), collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
system(cmd, intern = TRUE, ignore.stderr = TRUE)
cmd <- paste("findstr /N '^' /f:", shQuote(file), sep="", collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
cmd <- paste("findstr /N '^' /f:", file, sep="", collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
cmd <- paste("findstr /R /N '^' /f:", file, sep="", collapse = "")
system(cmd, intern = TRUE, ignore.stderr = TRUE)
if(endsWith(file, ".gz")){
file_connection <- gzfile(file, "rb")
}else{
file_connection <- file(file, "r")
}
data <- readLines(file_connection, n = -1)
close(file_connection)
data
if(endsWith(file, ".gz")){
file_connection <- gzfile(file, "rb")
}else{
file_connection <- file(file, "r")
}
data <- readLines(file_connection, n = -1)
close(file_connection)
seq_count <- length(data) /4
seq_count
file <- "vtamR_test/data/mfzr_1_fw.fastq.gz"
if(endsWith(file, ".gz")){
file_connection <- gzfile(file, "rb")
}else{
file_connection <- file(file, "r")
}
data <- readLines(file_connection, n = -1)
close(file_connection)
seq_count <- length(data) /4
# Print the number of lines
print(seq_count)
dir <- "vtamR_test/data/"
count_reads_fastq_linux <- function(file){
if(endsWith(file, ".zip")){
msg <- "File compression type is not supported"
print(msg)
return(0)
}
if(is_linux()){
if(endsWith(file, ".gz")){
cmd <- paste("zcat ", file, "| wc -l ", sep=" ")
}else{
cmd <- paste("wc -l", line, sep=" ")
}
seq_count <- as.integer(system(cmd, intern=TRUE))
seq_count <- seq_count/4
return(seq_count)
}else{
print("This command works only non linux-like systems is slow and might not work with very large files")
if(endsWith(file, ".gz")){
file_connection <- gzfile(file, "rb")
}else{
file_connection <- file(file, "r")
}
data <- readLines(file_connection, n = -1)
close(file_connection)
seq_count <- length(data) /4
return(seq_count)
}
}
dir <- "vtamR_test/data/"
count_reads_fastq_linux_dir<- function(dir, pattern=".fastq"){
dir <- check_dir(dir)
files <- list.files(path = dir, pattern=pattern)
df <- data.frame(
"filename"=files,
"read_count"=rep(NA, length(files))
)
for(i in 1:length(files)){
file_p <- paste(dir, files[i], sep="")
print(file_p)
n <- count_reads_fastq_linux(file)
df[i, "read_count"] <- n
}
return(df)
}
df <- count_reads_fastq_linux_dir(dir)
View(df)
count_reads_fastq_linux_dir<- function(dir, pattern=".fastq"){
dir <- check_dir(dir)
files <- list.files(path = dir, pattern=pattern)
df <- data.frame(
"filename"=files,
"read_count"=rep(NA, length(files))
)
for(i in 1:length(files)){
file_p <- paste(dir, files[i], sep="")
print(file_p)
n <- count_reads_fastq_linux(file_p)
df[i, "read_count"] <- n
}
return(df)
}
dir <- "vtamR_test/data/"
df <- count_reads_fastq_linux_dir(dir)
View(df)
library("devtools")
library("roxygen2")
library("seqinr") # splitseq for FilterCodonStop
library("dplyr")
library("tidyr") # gather for read_asv_table; pivot_wider in write_asvtable and stat_sample !!sym
library("utils") # to handle zipped files
library("ggplot2")
computer <- "Windows" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
#     fastqdir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
#    outdir <- "vtamR_test/out_zfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
#      asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
outdir <- "/home/meglecz/vtamR_large_files/out/"
mock_composition <- "/home/meglecz/vtamR_large_files/user_input/mock_composition_mfzr.csv"
asv_list <- "/home/meglecz/vtamR_large_files/user_input/asv_list.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#    fastqdir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
#     outdir <- "vtamR_test/out_mfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
#     asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastqdir <- "~/vtamR_large_data"
fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
outdir <- "/home/emese/vtamR_large_data/out/"
mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
# create the output directory and check the the slash at the end
outdir <- check_dir(dir=outdir)
fastqdir <- check_dir(dir=fastqdir)
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
###
### Merge
###
fastq_ascii <- 33
dir <- "vtamR_test/data"
dir <- "vtamR_test/data"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(df)
dir <- "vtamR_test/out/mered"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
dir <- "vtamR_test/out/mered"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fasta", file_type="fasta", outfile="", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
dir <- "vtamR_test/out/merged"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fasta", file_type="fasta", outfile="", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(df)
dir <- "vtamR_test/out/sorted"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fasta", file_type="fasta", outfile="", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(df)
dir <- "vtamR_test/out/sorted"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern="", file_type="", outfile="", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(df)
