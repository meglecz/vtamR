View(sample_coi_control)
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE)
colnames(tax_16S)
asvtble_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE)
colnames(asvtble_16S)
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE)
colnames(samples)
samples$sample <- paste(samples$run, samples$sample.final.Emese.Cecile, sep='.')
sample_16S_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif") %>%
filter(marker=="16S1")
View(sample_16S_control)
readcount_control_16S <- asvtble_16S %>%
select(sample_16S_control$sample)
View(sample_16S_control)
sample_16S_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif") %>%
filter(marker=="16S1") %>%
filter(run != "Bqt1")
readcount_control_16S <- asvtble_16S %>%
select(sample_16S_control$sample) %>%
sample_coi_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif") %>%
filter(marker=="IIICBR")
readcount_control_16S <- asvtble_16S %>%
select(sample_16S_control$sample) %>%
sample_coi_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif") %>%
filter(marker=="IIICBR")
readcount_control_16S <- asvtble_16S %>%
select(sample_16S_control$sample)
colnames(asvtble_16S)
readcount_control_16S <- asvtble_16S %>%
select(sample_16S_control$sample)
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE)
colnames(samples)
samples$sample <- paste(samples$run, samples$sample.final.Emese.Cecile, sep='.')
sample_16S_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif") %>%
filter(marker=="16S1") %>%
filter(run != "Bqt1")
readcount_control_16S <- asvtble_16S %>%
select(sample_16S_control$sample)
View(readcount_control_16S)
View(asvtble_16S)
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE)
colnames(tax_16S)
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE)
colnames(asvtable_16S)
tmp <- asvtable_16S %>%
select(-marker, -sequnece_length, -read_count, -sample_count, -runs )
print(colnames(tmp))
tmp <- asvtable_16S %>%
select(-marker, -sequnece_length, -read_count, -sample_count, -runs )
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE)
colnames(tax_16S)
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE)
colnames(asvtable_16S)
tmp <- asvtable_16S %>%
select(-marker, -sequnece_length, -read_count, -sample_count, -runs )
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs )
print(colnames(tmp))
length(colnames(tmp))
colnames(tmp)[1000-1324]
colnames(tmp)[1324]
colnames(tmp)[1323]
colnames(tmp)[1322]
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
length(colnames(tmp))
colnames(tmp)[1321]
colnames(tmp)
asvlong_16S <- tmp %>%
pivot_longer(names_to = "sample", values_to = "read_count",)
asvlong_16S <- tmp %>%
pivot_longer(cols != "variant", names_to = "sample", values_to = "read_count",)
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count",)
View(asvlong_16S)
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0)
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\.")
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0)
asvtbl16S[EPI15.s08_21_Che_2406_5.1]
asvtabl16S[EPI15.s08_21_Che_2406_5.1]
asvtable16S[EPI15.s08_21_Che_2406_5.1]
asvtable_16S[EPI15.s08_21_Che_2406_5.1]
asvtable_16S[EPI15.s08_21_Che_2406_5_1]
asvtable_16S[EPI15.s08_21_Che_2406_5]
asvtable_16S[EPI15.s08_21_Che_2406_5 1]
asvtable_16S["EPI15.s08_21_Che_2406_5 1"]
getwd()
colnames(asvtable_16S) > temp.txt
write.csv(colnames(asvtable_16S), file="tmp.txt")
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(tax_16S)
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(asvtable_16S)
# keep only samples and variant
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
length(colnames(tmp))
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE)
colnames(samples)
View(asvtable_16S)
samples$sample <- paste(samples$run, samples$sample.final.Emese.Cecile, sep='-')
sample_16S_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif") %>%
filter(marker=="16S1") %>%
filter(run != "Bqt1")
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(tax_16S)
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(asvtable_16S)
# keep only samples and variant
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
length(colnames(tmp))
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
View(samples)
# keep only samples and variant
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
length(colnames(tmp))
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
t <- colnames(samples)
t[2]  <- "sample"
t
colnames(samples) <- t
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(samples)
samples <- samples %>%
rename("sample" = "sample final Emese Cecile")
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples <- samples %>%
rename("sample" = "sample final Emese Cecile")
# keep only samples and variant
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
length(colnames(tmp))
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
View(asvlong_16S)
asvlong_16S <- left_join(asvlong_16S, samples, by=c("sample_short"="sample"))
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker="16S1")
samples <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker=="16S1")
# keep only samples and variant
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
length(colnames(tmp))
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
asvlong_16S <- left_join(asvlong_16S, samples, by=c("sample_short"="sample"))
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(tax_16S)
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(asvtable_16S)
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker=="16S1")
# keep only samples and variant
tmp <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 )
asvlong_16S <- tmp %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
asvlong_16S <- left_join(asvlong_16S, samples, by=c("sample_short"="sample", "run"="run"))
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
colnames(asvtable_16S)
# keep only samples and variant
asvlong_16S <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 ) %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
asvlong_16S <- left_join(asvlong_16S, samples, by=c("sample_short"="sample", "run"="run")) %>%
select(-SampleID)
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples_16S <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker=="16S1")
sample_16S_control <- samples %>%
filter(sample_type == "mock" | sample_type == "negatif")
View(sample_16S_control)
sample_16S_control <- samples_16S %>%
filter(sample_type == "mock" | sample_type == "negatif")
asvlong_16S_contol <- asvlong_16S %>%
filter(sample %in% sample_16S_control$sample)
# get taxonomy
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
# get 16S samles
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples_16S <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker=="16S1")
# read asvtable
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
# transform asvtable to long format
asvlong_16S <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 ) %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
# add sample type info to asvlong_16S
asvlong_16S <- left_join(asvlong_16S, samples, by=c("sample_short"="sample", "run"="run")) %>%
select(-SampleID)
sample_16S_control <- samples_16S %>%
filter(sample_type == "mock" | sample_type == "negatif")
# get taxonomy
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
# get 16S samles
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples_16S <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker=="16S1")
# read asvtable
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
# transform asvtable to long format
asvlong_16S <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 ) %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
# add sample type info to asvlong_16S
asvlong_16S <- left_join(asvlong_16S, samples, by=c("sample_short"="sample", "run"="run")) %>%
select(-SampleID)
# transform asvtable to long format
asvlong_16S <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 ) %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
View(asvlong_16S)
# add sample type info to asvlong_16S
asvlong_16S <- left_join(asvlong_16S, asvtable_16S, by=c("sample_short"="sample", "run"="run")) %>%
select(-SampleID)
# get taxonomy
tax_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/taxassign/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17_RDP_homogenized_taxa.tsv", sep="\t", header=TRUE, check.names = FALSE)
# get 16S samles
samples <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_unser_input/sample_types_Epi.tsv", sep="\t", header=TRUE, check.names = FALSE)
samples_16S <- samples %>%
rename("sample" = "sample final Emese Cecile") %>%
filter(marker=="16S1")
View(samples)
View(samples_16S)
# read asvtable
asvtable_16S <- read.table("/home/meglecz/vtam_EPI_Nextseq_2024_06/2024_06_25_doc_and_sum/asv_tables/pooled/pooled_asvtable_EPI_16S1_2024-07-01-14-19-17.tsv", sep="\t", header=TRUE, check.names = FALSE)
# transform asvtable to long format
asvlong_16S <- asvtable_16S %>%
select(-marker, -sequence_length, -read_count, -sample_count, -runs, -sequence, -clustersize, -clusterid_3 ) %>%
pivot_longer(cols = !starts_with("variant"), names_to = "sample", values_to = "read_count") %>%
filter(read_count>0) %>%
separate(sample, into =c("run","sample_short"), sep="\\-")
View(asvlong_16S)
# add sample type info to asvlong_16S
asvlong_16S <- left_join(asvlong_16S, samples_16S, by=c("sample_short"="sample", "run"="run")) %>%
select(-SampleID)
sample_16S_control <- samples_16S %>%
filter(sample_type == "mock" | sample_type == "negatif")
View(sample_16S_control)
asvlong_16S_contol <- asvlong_16S %>%
filter(sample %in% sample_16S_control$sample)
asvlong_16S_contol <- asvlong_16S %>%
filter(sample_type == "mock" | sample_type == "negatif")
View(asvlong_16S_contol)
asvlong_16S_contol <- asvlong_16S %>%
filter(sample_type == "negatif")
sum_variant_run <- asvlong_16S %>%
group_by(variant, run) %>%
summarise("read_count_var_run"=sum(read_count))
View(sum_variant_run)
View(asvlong_16S_contol)
asvlong_16S_contol <- left_join(asvlong_16S_contol, sum_variant_run, by=c("variant","run"))
asvlong_16S_contol$sample_to_all <- asvlong_16S_contol$read_count/asvlong_16S_contol$sum_variant_run
asvlong_16S_contol$sample_to_all <- asvlong_16S_contol$read_count/asvlong_16S_contol$read_count_var_run
sum_variant_run_sample_type <- asvlong_16S %>%
group_by(variant, run, sample_type) %>%
summarise("read_count_var_run_st"=sum(read_count))
View(sum_variant_run_sample_type)
#######
asvlong_16S_contol <- asvlong_16S %>%
filter(sample_type == "negatif")
sum_variant_run_sample_type <- asvlong_16S %>%
group_by(variant, run, sample_type) %>%
summarise("read_count_var_run_st"=sum(read_count))
asvlong_16S_contol <- left_join(asvlong_16S_contol, sum_variant_run_sample_type, by=c("variant","run", "sample_type"))
asvlong_16S_contol$sample_type_to_all <- asvlong_16S_contol$read_count/asvlong_16S_contol$read_count_var_run_st
library(dada2)
packageVersion("dada2")
path <-  "/home/meglecz/vtam_data/dada2/1_input_vtam-0.1.12/MFZR_orientation_pooled"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_fw.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_rv.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnFs[3:8])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
# quality filter
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(160,160),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
library(dplyr)
orig <- read.table("/home/meglecz/vtam_git/16S/16S_asvtable_TAS1-2_read_counts.tsv", sep="\t", header=TRUE)
orig <- read.table("/home/meglecz/vtam_git/16S/16S_asvtable_TAS1-2_read_counts.tsv", sep="\t", header=TRUE, na.strings = "")
orig <- read.table("/home/meglecz/vtam_git/16S/16S_asvtable_TAS1-2_read_counts.tsv", sep="\t", header=TRUE, na.strings = "", fill=TRUE)
View(orig)
caunt <- read.table("/home/meglecz/vtam_git/16S/SuppMat_16S_WO_tax.csv", sep="\t", header=TRUE, na.strings = "", fill=TRUE)
count <- read.table("/home/meglecz/vtam_git/16S/SuppMat_16S_WO_tax.csv", sep="\t", header=TRUE, na.strings = "", fill=TRUE)
colnames(orig)
orig <- orig %>%
select(1, 152:163)
colnames(orig) <- c("domain", "domain_bootstrap", "phylum", "phylum_bootstrap", "class", "class_bootstrap", "order", "order_bootstrap", "family", "family_bootstrap", "genus", "genus_bootstrap")
colnames(orig) <- c("variant_id", "domain", "domain_bootstrap", "phylum", "phylum_bootstrap", "class", "class_bootstrap", "order", "order_bootstrap", "family", "family_bootstrap", "genus", "genus_bootstrap")
colnames(count)
count <- left_join(count, orig, by="variant_id")
colnames(count)
write.csv2(file="/home/meglecz/vtam_git/16S/SuppMat_VTAM16S_corrected.tsv", count)
write.table(count, file="/home/meglecz/vtam_git/16S/SuppMat_VTAM16S_corrected.tsv", count=FALSE, sep=";", dec=".", row.names=FALSE)
write.table(count, file="/home/meglecz/vtam_git/16S/SuppMat_VTAM16S_corrected.tsv", quote=FALSE, sep=";", dec=".", row.names=FALSE)
bold <- read.table(tsv, sep="\t", header=TRUE, fill=TRUE)
tsv <- "/home/meglecz/mkCOInr/BOLD_2025_02/BOLD_Public.21-Feb-2025.tsv"
bold <- read.table(tsv, sep="\t", header=TRUE, fill=TRUE)
bold <- read.table(tsv, sep="\t", header=TRUE, fill=TRUE)
library("devtools")
library("roxygen2")
library("seqinr")
library("dplyr")
library("tidyr")
setwd("~/vtamR")
library("devtools")
library("roxygen2")
library("seqinr")
library("dplyr")
library("tidyr")
library("ggplot2")
load_all(".")
roxygenise()
usethis::use_roxygen_md()
df <- data.frame(
kingdom = c("Plantae", NA),
phylum  = c("Chlorophyta", NA),
class   = c("Trebouxiophyceae", "Phaeophyceae"),
order   = c(NA, "Fucales"),
family  = c(NA, NA),
genus   = c(NA, NA),
species = c(NA, NA),
stringsAsFactors = FALSE
)
View(df)
taxonomic_levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
# Loop through the taxonomic levels from highest to second-lowest
for (i in seq_along(taxonomic_levels)[-length(taxonomic_levels)]) {
current_level <- taxonomic_levels[i]
for (j in (i+1):length(taxonomic_levels)) {
lower_level <- taxonomic_levels[j]
# Replace NA in current_level with paste0(current_level, "_", lower_level_value), if lower_level is not NA
missing <- is.na(df[[current_level]]) & !is.na(df[[lower_level]])
df[[current_level]][missing] <- paste0(current_level, "_", df[[lower_level]][missing])
}
}
View(df)
tax_levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
# Function to fill missing higher-level taxa with lower-level names
fill_taxonomic_NAs <- function(df, tax_levels) {
for (i in seq_along(tax_levels[-length(tax_levels)])) {
higher <- tax_levels[i]
# Check lower levels from i+1 to end
for (lower in tax_levels[(i+1):length(tax_levels)]) {
df <- df %>%
mutate(!!higher := if_else(is.na(.data[[higher]]) & !is.na(.data[[lower]]),
paste0(higher, "_", .data[[lower]]),
.data[[higher]]))
}
}
return(df)
}
df <- data.frame(
kingdom = c("Plantae", NA),
phylum  = c("Chlorophyta", NA),
class   = c("Trebouxiophyceae", "Phaeophyceae"),
order   = c(NA, "Fucales"),
family  = c(NA, NA),
genus   = c(NA, NA),
species = c(NA, NA),
stringsAsFactors = FALSE
)
fill_taxonomic_NAs_base <- function(df, taxonomic_levels) {
# Loop through the taxonomic levels from highest to second-lowest
for (i in seq_along(taxonomic_levels)[-length(taxonomic_levels)]) {
current_level <- taxonomic_levels[i]
for (j in (i+1):length(taxonomic_levels)) {
lower_level <- taxonomic_levels[j]
# Replace NA in current_level with paste0(current_level, "_", lower_level_value), if lower_level is not NA
missing <- is.na(df[[current_level]]) & !is.na(df[[lower_level]])
df[[current_level]][missing] <- paste0(current_level, "_", df[[lower_level]][missing])
}
}
}
fill_taxonomic_NAs_base <- function(df, taxonomic_levels) {
# Loop through the taxonomic levels from highest to second-lowest
for (i in seq_along(taxonomic_levels)[-length(taxonomic_levels)]) {
current_level <- taxonomic_levels[i]
for (j in (i+1):length(taxonomic_levels)) {
lower_level <- taxonomic_levels[j]
# Replace NA in current_level with paste0(current_level, "_", lower_level_value), if lower_level is not NA
missing <- is.na(df[[current_level]]) & !is.na(df[[lower_level]])
df[[current_level]][missing] <- paste0(current_level, "_", df[[lower_level]][missing])
}
}
return(df)
}
taxonomic_levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
fill_taxonomic_NAs_base <- function(df, taxonomic_levels) {
# Loop through the taxonomic levels from highest to second-lowest
for (i in seq_along(taxonomic_levels)[-length(taxonomic_levels)]) {
current_level <- taxonomic_levels[i]
for (j in (i+1):length(taxonomic_levels)) {
lower_level <- taxonomic_levels[j]
# Replace NA in current_level with paste0(current_level, "_", lower_level_value), if lower_level is not NA
missing <- is.na(df[[current_level]]) & !is.na(df[[lower_level]])
df[[current_level]][missing] <- paste0(current_level, "_", df[[lower_level]][missing])
}
}
return(df)
}
df <- data.frame(
kingdom = c("Plantae", NA),
phylum  = c("Chlorophyta", NA),
class   = c("Trebouxiophyceae", "Phaeophyceae"),
order   = c(NA, "Fucales"),
family  = c(NA, NA),
genus   = c(NA, NA),
species = c(NA, NA),
stringsAsFactors = FALSE
)
df_base <- fill_taxonomic_NAs_base(df, taxonomic_levels)
View(df_base)
taxonomic_levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
fill_taxonomic_NAs_base <- function(df, taxonomic_levels) {
# Loop through the taxonomic levels from highest to second-lowest
for (i in seq_along(taxonomic_levels)[-length(taxonomic_levels)]) {
current_level <- taxonomic_levels[i]
for (j in (i+1):length(taxonomic_levels)) {
lower_level <- taxonomic_levels[j]
# Replace NA in current_level with paste0(current_level, "_", lower_level_value), if lower_level is not NA
missing <- is.na(df[[current_level]]) & !is.na(df[[lower_level]])
df[[current_level]][missing] <- paste0(current_level, "_", df[[lower_level]][missing])
}
}
return(df)
}
df_test <- data.frame(
kingdom = c("Plantae", NA),
phylum  = c("Chlorophyta", NA),
class   = c("Trebouxiophyceae", "Phaeophyceae"),
order   = c(NA, "Fucales"),
family  = c(NA, NA),
genus   = c(NA, NA),
species = c(NA, NA),
stringsAsFactors = FALSE
)
df_base <- fill_taxonomic_NAs_base(df_test, taxonomic_levels)
View(df_base)
df_test <- data.frame(
kingdom = c("Plantae", NA),
phylum  = c("Chlorophyta", NA),
class   = c("Trebouxiophyceae", "Phaeophyceae"),
order   = c(NA, "Fucales"),
family  = c(NA, NA),
genus   = c(NA, "toto"),
species = c(NA, NA),
stringsAsFactors = FALSE
)
df_base <- fill_taxonomic_NAs_base(df_test, taxonomic_levels)
View(df_base)
View(df_base)
