cat(paste(res$output, collapse = "\n"))
}
}
}
check_path(path=swarm_path)
check_path(path=cutadapt_path)
check_path(path=vsearch_path)
blast_path <- "~/miniconda3/envs/vtam/bin/blastn" # v2.10.1+
check_path(path=blast_path)
check_executables <- function(cutadapt_path="", vsearch_path="", blast_path="", swarm_path="")
{
# in case ~ is used for home
cutadapt_path <- path.expand(cutadapt_path)
vsearch_path <- path.expand(vsearch_path)
blast_path <- path.expand(blast_path)
swarm_path <- path.expand(swarm_path)
args <- c("--help")
##### vsearch
if (!file.exists(vsearch_path)) {
stop("vsearch binary not found at: ", vsearch_path)
}else{
res <- tryCatch({
output <- system2(vsearch_path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("Error running vsearch:\n", res$message, "\n")
} else {
cat("vsearch ran successfully. Output:\n")
cat(paste(res$output, collapse = "\n"))
}
}
}
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--help")
if (Sys.which(path) == "") {
#  if (!file.exists(path)) {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("Error:\n", res$message, "\n")
} else {
cat(paste(res$output, collapse = "\n"))
}
}
}
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--h")
if (Sys.which(path) == "") {
#  if (!file.exists(path)) {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("Error:\n", res$message, "\n")
} else {
cat(paste(res$output, collapse = "\n"))
}
}
}
blast_path <- "~/miniconda3/envs/vtam/bin/blastn" # v2.10.1+
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("-help")
if (Sys.which(path) == "") {
#  if (!file.exists(path)) {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("Error:\n", res$message, "\n")
} else {
cat(paste(res$output, collapse = "\n"))
}
}
}
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
#  if (!file.exists(path)) {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("Error:\n", res$message, "\n")
} else {
cat(paste(res$output, collapse = "\n"))
}
}
}
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
basename(blast_path)
path <- blast_path
blast_path
path
# in case ~ is used for home
path <- path.expand(path)
args <- if(basename(path) == "blastn"){
character(0)  # No args for blastn, it prints version in stderr
} else {
"--version"
}
args
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("Error:\n", res$message, "\n")
} else {
cat(paste(res$output, collapse = "\n"))
}
check_path <- function(path = "", program_name = NULL) {
path <- path.expand(path)
# If the user gave a filename or path that exists, use it.
# Otherwise, try resolving via PATH
if (!file.exists(path)) {
full_path <- Sys.which(path)
if (full_path == "") {
stop("❌ Binary not found: ", path)
}
path <- full_path
}
# Special handling for known edge cases like blastn
args <- if (!is.null(program_name) && program_name == "blastn") {
character(0)  # No args for blastn, it prints version in stderr
} else {
"--version"
}
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("❌ Error:\n", res$message, "\n")
} else {
cat("✅ Output from ", basename(path), ":\n")
cat(paste(res$output, collapse = "\n"), "\n")
}
}
check_path(path=blast_path)
check_path(path=swarm_path)
check_path(path=cutadapt_path)
check_path(path=vsearch_path)
check_path(path=blast_path)
check_path <- function(path = "", program_name = NULL) {
path <- path.expand(path)
# If the user gave a filename or path that exists, use it.
# Otherwise, try resolving via PATH
if (!file.exists(path)) {
full_path <- Sys.which(path)
if (full_path == "") {
stop("❌ Binary not found: ", path)
}
path <- full_path
}
# Special handling for known edge cases like blastn
args <- if (!is.null(program_name) && program_name == "blastn") {
character(0)  # No args for blastn, it prints version in stderr
} else {
"--version"
}
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
if (!res$success) {
cat("❌ Error:\n", res$message, "\n")
} else {
cat("✅ Output from ", basename(path), ":\n")
cat(paste(res$output, collapse = "\n"), "\n")
}
}
check_path(path=blast_path)
system2(path, args = args, stdout = TRUE, stderr = TRUE)
args <- c("--version")
system2(path, args = args, stdout = TRUE, stderr = TRUE)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
cat(paste(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n"))
}
}
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- cat(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n")
version <- sub("\d+\.\d+\.*\d*")
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- cat(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n")
version <- sub("\\d+\\.\\d+\\.*\\d*")
print(version)
}
}
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- cat(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n")
version <- sub("\\d+\\.\\d+\\.*\\d*", msg)
print(version)
}
}
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- cat(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n")
version <- grep("\\d+\\.\\d+\\.*\\d*", msg)
print(version)
}
}
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- cat(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n")
#    version <- grep("\\d+\\.\\d+\\.*\\d*", msg)
version <- regmatches(msg, regexpr("\\d+\\.\\d+\\.*\\d*", msg))
print(version)
}
}
check_path(path=blast_path)
path
args
cat(system2(path, args = args, stdout = TRUE, stderr = TRUE), collapse = "\n")
msg
msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
#    version <- grep("\\d+\\.\\d+\\.*\\d*", msg)
version <- regmatches(msg, regexpr("\\d+\\.\\d+\\.*\\d*", msg))
msg
msg
msg
#    version <- grep("\\d+\\.\\d+\\.*\\d*", msg)
version <- regmatches(msg, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*", msg))
version
print(version)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(msg, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*", msg))
print(version)
}
}
check_path(path=blast_path)
check_path(path=swarm_path)
check_path(path=cutadapt_path)
check_path(path=vsearch_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(msg, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*", msg))
print(version[1])
}
}
check_path(path=blast_path)
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(msg, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\+*", msg))
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(msg, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\+*", msg))
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(msg, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\\+*", msg))
print(version[1])
}
}
check_path(path=blast_path)
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}, error = function(e) {
list(success = FALSE, message = conditionMessage(e))
})
#     msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(output, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\\+*", output))
print(version[1])
}
}
swarm_path <- "swarm" # v2.1.12
blast_path <- "~/miniconda3/envs/vtam/bin/blastn" # v2.10.1+
vsearch_path <- "~/miniconda3/envs/vtam/bin/vsearch" # v2.15.1
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}
#, error = function(e) {
#  list(success = FALSE, message = conditionMessage(e))
#}
)
#     msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(output, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\\+*", output))
print(version[1])
}
}
### Bombyx
cutadapt_path <- "~/miniconda3/envs/vtam/bin/cutadapt" # v3.4
vsearch_path <- "~/miniconda3/envs/vtam/bin/vsearch" # v2.15.1
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args)
#    output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
list(success = TRUE, output = output)
}
#, error = function(e) {
#  list(success = FALSE, message = conditionMessage(e))
#}
)
#     msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(output, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\\+*", output))
print(version[1])
}
}
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
res <- tryCatch({
output <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
#    list(success = TRUE, output = output)
}, error = function(e) {
#   list(success = FALSE, message = conditionMessage(e))
}
)
#     msg <- system2(path, args = args, stdout = TRUE, stderr = TRUE)
version <- regmatches(output, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\\+*", output))
print(version[1])
}
}
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
check_path <- function(path="")
{
# in case ~ is used for home
path <- path.expand(path)
args <- c("--version")
if (Sys.which(path) == "") {
stop("Binary not found at: ", path)
}else{
msg <- system2(path, args = args, stdout = TRUE, stderr = FALSE)
version <- regmatches(output, regexpr("[0-9]+\\.[0-9]+\\.*[0-9]*\\+*", output))
print(version[1])
}
}
check_path(path=vsearch_path)
check_path(path=cutadapt_path)
check_path(path=swarm_path)
check_path(path=blast_path)
