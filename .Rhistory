asv_tax <- TaxAssign(read_count_samples_df, ltg_params_df, taxonomy=taxonomy, blast_db=blast_db, blast_path=blast_path, outdir=outdir)
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
####
# get unique list of ASVs make BLAST and read results to data frame
# !!!!! TODO Make it possible to use an input file with asv as column => complete file
seqs <- unique(read_count_samples_df$asv)
blast_out <- paste(outdir_tmp, 'blast.out', sep="")
# run blast
run_blast(seqs, blast_db=blast_db, blast_path=blast_path, out=blast_out, qcov_hsp_perc=min(ltg_params_df$pcov), perc_identity=min(ltg_params_df$pid), num_threads=8)
# read BLAST results
blast_res <- read.delim(blast_out, header=F, sep="\t", fill=T, quote="")
colnames(blast_res) <- c("qseqid","sseqid","pident","length","qcovhsp","staxids","evalue")
blast_res <- blast_res %>%
select(qseqid, pident, qcovhsp, staxids)
#### Read taxonomy info
# read taxonomy file; quote="" is important, snce some of the taxon names have quites and this should be ignored
tax_df <- read.delim(taxonomy, header=T, sep="\t", fill=T, quote="")
# make data frame with old taxids as line numbers and taxids in a columns
old_taxid <- tax_df %>%
filter(!is.na(old_tax_id)) %>%
select(tax_id, old_tax_id)
# delete old_tax_ids from tax_df and make taxids unique
tax_df <- tax_df %>%
select(-old_tax_id)
tax_df <- unique(tax_df)
colnames(tax_df)
View(stat_df)
View(tax_df)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
View(blast_res)
#### add taxinfo to the blastres
# replace old taxids (if any) by up to date ones
blast_res <- left_join(blast_res, old_taxid, by=c("staxids" = "old_tax_id"))
blast_res$staxids[which(!is.na(blast_res$tax_id))] <- blast_res$tax_id[which(!is.na(blast_res$tax_id))]
# delete tax_id column since the values (if non NA were used to replace staxids)
blast_res <- blast_res %>%
select(-tax_id)
# add taxonomy info
blast_res <- left_join(blast_res, tax_df, by=c("staxids" = "tax_id")) %>%
select(-parent_tax_id, -rank, -name_txt)
### make a lineage for each taxid in blastres
taxid_list <- unique(blast_res$staxids)
lineages <- get_lineage_ids(taxid_list, tax_df)
View(lineages)
taxres_df <- data.frame(asv = seqs, ltg_taxid = NA, pid=NA, pcov=NA, phit=NA, taxn=NA, seqn=NA, refres=NA, ltgres=NA)
View(taxres_df)
View(lineages)
class(lineages)
library("devtools")
library("roxygen2")
library("seqinr")
library("dplyr")
library("tidyr")
setwd("~/vtamR")
vsearch_path = ""
#blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
blast_path="" # endoume deactivate conda
db_path="~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/" # Endoume
#db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/" # Bombyx
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
fastadir <- "local/mfzr/sorted/"
fileinfo <- "local/user_input/fileinfo_mfzr_eu.csv"
mock_composition <- "local/user_input/mock_composition_mfzr_eu.csv"
sep=";"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="local/out")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastadir, write_csv=F, outdir=outdir, sep=sep)
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
### LFN_global_read_count
###
# Eliminate variants with less than global_read_count_cutoff reads in the dataset
global_read_count_cutoff = 60
read_count_df <- LFN_global_read_count(read_count_df, global_read_count_cutoff, write_csv=T, outdir=outdir, sep=sep)
stat_df <- get_stat(read_count_df, stat_df, stage="LFN_global_read_count", params=global_read_count_cutoff)
###
### PoolReplicates
###
digits = 0
read_count_samples_df <- PoolReplicates(read_count_df, digits=digits, write_csv=T, outdir=outdir, sep=sep)
TaxAssign <- function(read_count_samples_df, ltg_params_df, taxonomy="", blast_db="", blast_path="", outdir=""){
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
####
# get unique list of ASVs make BLAST and read results to data frame
# !!!!! TODO Make it possible to use an input file with asv as column => complete file
seqs <- unique(read_count_samples_df$asv)
blast_out <- paste(outdir_tmp, 'blast.out', sep="")
# run blast
run_blast(seqs, blast_db=blast_db, blast_path=blast_path, out=blast_out, qcov_hsp_perc=min(ltg_params_df$pcov), perc_identity=min(ltg_params_df$pid), num_threads=8)
# read BLAST results
blast_res <- read.delim(blast_out, header=F, sep="\t", fill=T, quote="")
colnames(blast_res) <- c("qseqid","sseqid","pident","length","qcovhsp","staxids","evalue")
blast_res <- blast_res %>%
select(qseqid, pident, qcovhsp, staxids)
#### Read taxonomy info
# read taxonomy file; quote="" is important, since some of the taxon names have quotes and this should be ignored
tax_df <- read.delim(taxonomy, header=T, sep="\t", fill=T, quote="")
# make data frame with old taxids as line numbers and taxids in a columns
old_taxid <- tax_df %>%
filter(!is.na(old_tax_id)) %>%
select(tax_id, old_tax_id)
# delete old_tax_ids from tax_df and make taxids unique
tax_df <- tax_df %>%
select(-old_tax_id)
tax_df <- unique(tax_df)
#### add taxinfo to the blastres
# replace old taxids (if any) by up to date ones
blast_res <- left_join(blast_res, old_taxid, by=c("staxids" = "old_tax_id"))
blast_res$staxids[which(!is.na(blast_res$tax_id))] <- blast_res$tax_id[which(!is.na(blast_res$tax_id))]
# delete tax_id column since the values (if non NA were used to replace staxids)
blast_res <- blast_res %>%
select(-tax_id)
# add taxonomy info
blast_res <- left_join(blast_res, tax_df, by=c("staxids" = "tax_id")) %>%
select(-parent_tax_id, -rank, -name_txt)
### make a lineage for each taxid in blastres
taxid_list <- unique(blast_res$staxids)
lineages <- get_lineage_ids(taxid_list, tax_df)
taxres_df <- data.frame(asv = seqs, ltg_taxid = NA, pid=NA, pcov=NA, phit=NA, taxn=NA, seqn=NA, refres=NA, ltgres=NA)
for(i in 1:length(seqs)){ # go through all sequences
#  i=14
for(p in 1:nrow(ltg_params_df)){ # for each pid
#      p <- 1
pidl <- ltg_params_df[p,"pid"]
pcovl <- ltg_params_df[p,"pcov"]
phitl <- ltg_params_df[p,"phit"]
taxnl <- ltg_params_df[p,"taxn"]
seqnl <- ltg_params_df[p,"seqn"]
refresl <- ltg_params_df[p,"refres"]
ltgresl <- ltg_params_df[p,"ltgres"]
# filter the blastres according to  pid, pcov, refres
df_intern <- blast_res %>%
filter(qseqid==i & pident>=pidl & qcovhsp>=pcovl & taxlevel>=refresl)
# check if enough taxa and seq among validated hits
tn <- length(unique(df_intern$staxids))
if(tn >= taxnl & nrow(df_intern) >= seqnl ){
ltg <- make_ltg(df_intern$staxids, lineages, phit = phitl)
taxres_df[i,2:ncol(taxres_df)] <- c(ltg, pidl, pcovl, phitl, taxnl, seqnl, refresl, ltgresl)
print(i)
print(p)
print(ltg)
break
} # end if
} # end p (pids)
} # end i (asvs)
return(taxres_df)
}
###
### TaxAssign
###
asv_tax <- TaxAssign(read_count_samples_df, ltg_params_df, taxonomy=taxonomy, blast_db=blast_db, blast_path=blast_path, outdir=outdir)
blast_out <- paste(outdir_tmp, 'blast.out', sep="")
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
outdir_tmp
blast_out <- paste(outdir_tmp, 'blast.out', sep="")
blast_out
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
fastadir <- "local/mfzr/sorted/"
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
# run blast; blast_res columns: "qseqid","pident","qcovhsp","staxids"
blast_res <- run_blast(read_count_samples_df, blast_db=blast_db, blast_path=blast_path, outdir=outdir_tmp, qcov_hsp_perc=min(ltg_params_df$pcov), perc_identity=min(ltg_params_df$pid), num_threads=8)
View(blast_res)
colnames(blast_res)
colnames(old_taxids)
colnames(old_taxid)
#### Read taxonomy info
# read taxonomy file; quote="" is important, since some of the taxon names have quotes and this should be ignored
tax_df <- read.delim(taxonomy, header=T, sep="\t", fill=T, quote="")
# make data frame with old taxids as line numbers and taxids in a columns
old_taxid <- tax_df %>%
filter(!is.na(old_tax_id)) %>%
select(tax_id, old_tax_id)
# delete old_tax_ids from tax_df and make taxids unique
tax_df <- tax_df %>%
select(-old_tax_id)
tax_df <- unique(tax_df)
colnames(old_taxids)
colnames(old_taxid)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
fastadir <- "local/mfzr/sorted/"
#### Read taxonomy info
# read taxonomy file; quote="" is important, since some of the taxon names have quotes and this should be ignored
tax_df <- read.delim(taxonomy, header=T, sep="\t", fill=T, quote="")
# make data frame with old taxids as line numbers and taxids in a columns
old_taxid <- tax_df %>%
filter(!is.na(old_tax_id)) %>%
select(tax_id, old_tax_id)
# delete old_tax_ids from tax_df and make taxids unique
tax_df <- tax_df %>%
select(-old_tax_id)
tax_df <- unique(tax_df)
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
### run blast and clean/complete results
# run blast and read results to data frame (blast_res columns: "qseqid","pident","qcovhsp","staxids")
blast_res <- run_blast(read_count_samples_df, blast_db=blast_db, blast_path=blast_path, outdir=outdir_tmp, qcov_hsp_perc=min(ltg_params_df$pcov), perc_identity=min(ltg_params_df$pid), num_threads=8)
# add update old taxids to valid ones
update_taxids(blast_res, old_taxid)
# add update old taxids to valid ones
blast_res <- update_taxids(blast_res, old_taxid)
# add taxlevel
blast_res <- left_join(blast_res, tax_df, by=c("staxids" = "tax_id")) %>%
select(-parent_tax_id, -rank, -name_txt)
### make a lineage for each taxid in blastres
taxid_list <- unique(blast_res$staxids)
lineages <- get_lineage_ids(taxid_list, tax_df)
taxres_df <- data.frame(asv = seqs, ltg_taxid = NA, pid=NA, pcov=NA, phit=NA, taxn=NA, seqn=NA, refres=NA, ltgres=NA)
View(lineages)
taxres_df <- data.frame(asv = unique(read_count_samples_df$asv), ltg_taxid = NA, pid=NA, pcov=NA, phit=NA, taxn=NA, seqn=NA, refres=NA, ltgres=NA)
View(blast_res)
View(taxres_df)
for(i in 1:nrow(taxres_df)){ # go through all sequences
#  i=14
for(p in 1:nrow(ltg_params_df)){ # for each pid
#      p <- 1
pidl <- ltg_params_df[p,"pid"]
pcovl <- ltg_params_df[p,"pcov"]
phitl <- ltg_params_df[p,"phit"]
taxnl <- ltg_params_df[p,"taxn"]
seqnl <- ltg_params_df[p,"seqn"]
refresl <- ltg_params_df[p,"refres"]
ltgresl <- ltg_params_df[p,"ltgres"]
# filter the blastres according to  pid, pcov, refres
df_intern <- blast_res %>%
filter(qseqid==i & pident>=pidl & qcovhsp>=pcovl & taxlevel>=refresl)
# check if enough taxa and seq among validated hits
tn <- length(unique(df_intern$staxids))
if(tn >= taxnl & nrow(df_intern) >= seqnl ){
ltg <- make_ltg(df_intern$staxids, lineages, phit = phitl)
taxres_df[i,2:ncol(taxres_df)] <- c(ltg, pidl, pcovl, phitl, taxnl, seqnl, refresl, ltgresl)
print(i)
print(p)
print(ltg)
break
} # end if
} # end p (pids)
} # end i (asvs)
View(taxres_df)
setwd("~/vtamR")
vsearch_path = ""
#blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
blast_path="" # endoume deactivate conda
db_path="~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/" # Endoume
#db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/" # Bombyx
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
fastadir <- "local/mfzr/sorted/"
fileinfo <- "local/user_input/fileinfo_mfzr_eu.csv"
mock_composition <- "local/user_input/mock_composition_mfzr_eu.csv"
sep=";"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="local/out")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastadir, write_csv=F, outdir=outdir, sep=sep)
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
### LFN_global_read_count
###
# Eliminate variants with less than global_read_count_cutoff reads in the dataset
global_read_count_cutoff = 60
read_count_df <- LFN_global_read_count(read_count_df, global_read_count_cutoff, write_csv=T, outdir=outdir, sep=sep)
stat_df <- get_stat(read_count_df, stat_df, stage="LFN_global_read_count", params=global_read_count_cutoff)
###
### PoolReplicates
###
digits = 0
read_count_samples_df <- PoolReplicates(read_count_df, digits=digits, write_csv=T, outdir=outdir, sep=sep)
TaxAssign <- function(read_count_samples_df, ltg_params_df, taxonomy="", blast_db="", blast_path="", outdir=""){
#### Read taxonomy info
# read taxonomy file; quote="" is important, since some of the taxon names have quotes and this should be ignored
tax_df <- read.delim(taxonomy, header=T, sep="\t", fill=T, quote="")
# make data frame with old taxids as line numbers and taxids in a columns
old_taxid <- tax_df %>%
filter(!is.na(old_tax_id)) %>%
select(tax_id, old_tax_id)
# delete old_tax_ids from tax_df and make taxids unique
tax_df <- tax_df %>%
select(-old_tax_id)
tax_df <- unique(tax_df)
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
### run blast and clean/complete results
# run blast and read results to data frame (blast_res columns: "qseqid","pident","qcovhsp","staxids")
blast_res <- run_blast(read_count_samples_df, blast_db=blast_db, blast_path=blast_path, outdir=outdir_tmp, qcov_hsp_perc=min(ltg_params_df$pcov), perc_identity=min(ltg_params_df$pid), num_threads=8)
# add update old taxids to valid ones
blast_res <- update_taxids(blast_res, old_taxid)
# add taxlevel
blast_res <- left_join(blast_res, tax_df, by=c("staxids" = "tax_id")) %>%
select(-parent_tax_id, -rank, -name_txt)
### make a lineage for each taxid in blastres
taxid_list <- unique(blast_res$staxids)
lineages <- get_lineage_ids(taxid_list, tax_df)
taxres_df <- data.frame(asv = unique(read_count_samples_df$asv), ltg_taxid = NA, pid=NA, pcov=NA, phit=NA, taxn=NA, seqn=NA, refres=NA, ltgres=NA)
for(i in 1:nrow(taxres_df)){ # go through all sequences
#  i=14
for(p in 1:nrow(ltg_params_df)){ # for each pid
#      p <- 1
pidl <- ltg_params_df[p,"pid"]
pcovl <- ltg_params_df[p,"pcov"]
phitl <- ltg_params_df[p,"phit"]
taxnl <- ltg_params_df[p,"taxn"]
seqnl <- ltg_params_df[p,"seqn"]
refresl <- ltg_params_df[p,"refres"]
ltgresl <- ltg_params_df[p,"ltgres"]
# filter the blastres according to  pid, pcov, refres
df_intern <- blast_res %>%
filter(qseqid==i & pident>=pidl & qcovhsp>=pcovl & taxlevel>=refresl)
# check if enough taxa and seq among validated hits
tn <- length(unique(df_intern$staxids))
if(tn >= taxnl & nrow(df_intern) >= seqnl ){
ltg <- make_ltg(df_intern$staxids, lineages, phit = phitl)
taxres_df[i,2:ncol(taxres_df)] <- c(ltg, pidl, pcovl, phitl, taxnl, seqnl, refresl, ltgresl)
print(i)
print(p)
print(ltg)
break
} # end if
} # end p (pids)
} # end i (asvs)
return(taxres_df)
}
###
### TaxAssign
###
asv_tax <- TaxAssign(read_count_samples_df, ltg_params_df, taxonomy=taxonomy, blast_db=blast_db, blast_path=blast_path, outdir=outdir)
View(asv_tax)
taxids <- unique(taxres_df$ltg)
View(asv_tax)
taxids <- unique(asv_tax$ltg_taxid)
taxids
# taxids is a vector of taxids; there can be duplicated values
lineages <- as.data.frame(taxids)
colnames(lineages) <- c("tax_id")
i <- 1
# use i as name instead of tax_id
new_colname <- as.character(i)
# add parent_tax_id and rename columns
lineages <- left_join(lineages, tax_df, by="tax_id")%>%
select(-name_txt, -taxlevel) %>%
# !! = interprent the variable
rename(!!new_colname :=tax_id, "tax_id"=parent_tax_id)
lineages <- left_join(lineages, tax_df, by="tax_id")%>%
select(-name_txt, -taxlevel)
#### Read taxonomy info
# read taxonomy file; quote="" is important, since some of the taxon names have quotes and this should be ignored
tax_df <- read.delim(taxonomy, header=T, sep="\t", fill=T, quote="")
# make data frame with old taxids as line numbers and taxids in a columns
old_taxid <- tax_df %>%
filter(!is.na(old_tax_id)) %>%
select(tax_id, old_tax_id)
# delete old_tax_ids from tax_df and make taxids unique
tax_df <- tax_df %>%
select(-old_tax_id)
tax_df <- unique(tax_df)
####
# create a tmp directory for temporary files using time and a random number
outdir_tmp <- paste(outdir, 'tmp_', trunc(as.numeric(Sys.time())), sample(1:100, 1), sep='')
outdir_tmp <- check_dir(outdir_tmp)
### run blast and clean/complete results
# run blast and read results to data frame (blast_res columns: "qseqid","pident","qcovhsp","staxids")
blast_res <- run_blast(read_count_samples_df, blast_db=blast_db, blast_path=blast_path, outdir=outdir_tmp, qcov_hsp_perc=min(ltg_params_df$pcov), perc_identity=min(ltg_params_df$pid), num_threads=8)
# add update old taxids to valid ones
blast_res <- update_taxids(blast_res, old_taxid)
# add taxlevel
blast_res <- left_join(blast_res, tax_df, by=c("staxids" = "tax_id")) %>%
select(-parent_tax_id, -rank, -name_txt)
### make a lineage for each taxid in blastres
lineages <- get_lineage_ids(unique(blast_res$staxids), tax_df)
# initialize data frame with asv and NA for all other cells
taxres_df <- data.frame(asv = unique(read_count_samples_df$asv), ltg_taxid = NA, pid=NA, pcov=NA, phit=NA, taxn=NA, seqn=NA, refres=NA, ltgres=NA)
for(i in 1:nrow(taxres_df)){ # go through all sequences
for(p in 1:nrow(ltg_params_df)){ # for each pid
pidl <- ltg_params_df[p,"pid"]
pcovl <- ltg_params_df[p,"pcov"]
phitl <- ltg_params_df[p,"phit"]
taxnl <- ltg_params_df[p,"taxn"]
seqnl <- ltg_params_df[p,"seqn"]
refresl <- ltg_params_df[p,"refres"]
ltgresl <- ltg_params_df[p,"ltgres"]
# filter the blastres according to  pid, pcov, refres
df_intern <- blast_res %>%
filter(qseqid==i & pident>=pidl & qcovhsp>=pcovl & taxlevel>=refresl)
# check if enough taxa and seq among validated hits
tn <- length(unique(df_intern$staxids))
if(tn >= taxnl & nrow(df_intern) >= seqnl ){
# make ltg if all conditions are met
ltg <- make_ltg(df_intern$staxids, lineages, phit = phitl)
# fill out line with the ltg and the parmeters that were used to get it
taxres_df[i,2:ncol(taxres_df)] <- c(ltg, pidl, pcovl, phitl, taxnl, seqnl, refresl, ltgresl)
break
} # end if
} # end p (pids)
} # end i (asvs)
View(taxres_df)
taxids <- unique(taxres_df$ltg_taxid)
# taxids is a vector of taxids; there can be duplicated values
lineages <- as.data.frame(taxids)
colnames(lineages) <- c("tax_id")
i <- 1
# use i as name instead of tax_id
new_colname <- as.character(i)
# add parent_tax_id and rename columns
lineages <- left_join(lineages, tax_df, by="tax_id")%>%
select(-name_txt, -taxlevel) %>%
# !! = interprent the variable
rename(!!new_colname :=tax_id, "tax_id"=parent_tax_id)
View(lineages)
# taxids is a vector of taxids; there can be duplicated values
lineages <- as.data.frame(taxids)
colnames(lineages) <- c("tax_id")
i <- 1
# use i as name instead of tax_id
new_colname <- as.character(i)
lineages <- left_join(lineages, tax_df, by="tax_id")%>%
select(-name_txt, -taxlevel)
View(tax_df)
# taxids is a vector of taxids; there can be duplicated values
lineages <- as.data.frame(taxids)
colnames(lineages) <- c("tax_id")
i <- 1
new_colname <- as.character(i)
lineages <- left_join(lineages, tax_df, by="tax_id")
