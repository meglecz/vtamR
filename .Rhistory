roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"
# LFN sample_replicate (by column)
lfn_sample_replicate_cutoff = 0.1
read_count_df_lnf_sample_replicate <- LFN_sample_replicate(read_count_df, lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lnf_sample_replicate, stat_df, "LFN_sample_replicate", lfn_sample_replicate_cutoff)
View(stat_df)
?LFN_sample_replicate
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="~/vtamR/local/out/small")
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.1
by_replicate = TRUE
read_count_df_lnf_variant <- LFN_variant(read_count_df, lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir)
param_values <- paste(lnf_variant_cutoff, by_replicate, sep=";")
stat_df <- get_stat(read_count_df_lnf_variant, stat_df, "LFN_variant", param_values)
View(stat_df)
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
read_count_df <- pool_LFN(read_count_df_lfn_read_count, read_count_df_lnf_variant, read_count_df_lnf_sample_replicate, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, "FilterLFN", NA)
# delete temporary data frames
read_count_df_lfn_read_count <- NULL
read_count_df_lnf_variant <- NULL
read_count_df_lnf_sample_replicate <- NULL
View(read_count_df)
View(stat_df)
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
fastqdir <- "/home/meglecz/vtam_benchmark_local/vtam_bat/fasta/"
fileinfo <- "/home/meglecz/vtam_benchmark_local/vtam_bat/fasta/fileinfo_vtamr.csv"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="~/vtamR/local/out/small")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastqdir, write_csv=F, outdir=outdir)
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, "Input", NA)
###
### LFN_global_read_count
###
# Eliminate variants with less than global_read_count_cutoff reads in the dataset
global_read_count_cutoff = 2
read_count_df <- LFN_global_read_count(read_count_df, global_read_count_cutoff, write_csv=F, outdir=outdir)
stat_df <- get_stat(read_count_df, stat_df, "LFN_global_read_count", global_read_count_cutoff)
###
### LFN_filters
###
# LFN_read_count
lfn_read_count_cutoff = 2
read_count_df_lfn_read_count <- LFN_read_count(read_count_df, lfn_read_count_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lfn_read_count, stat_df, "LFN_read_count", lfn_read_count_cutoff)
# LFN_sample_replicate (by column)
lfn_sample_replicate_cutoff = 0.1
read_count_df_lnf_sample_replicate <- LFN_sample_replicate(read_count_df, lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lnf_sample_replicate, stat_df, "LFN_sample_replicate", lfn_sample_replicate_cutoff)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.1
by_replicate = TRUE
read_count_df_lnf_variant <- LFN_variant(read_count_df, lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir)
param_values <- paste(lnf_variant_cutoff, by_replicate, sep=";")
stat_df <- get_stat(read_count_df_lnf_variant, stat_df, "LFN_variant", param_values)
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
read_count_df <- pool_LFN(read_count_df_lfn_read_count, read_count_df_lnf_variant, read_count_df_lnf_sample_replicate, write_csv=T, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, "FilterLFN", NA)
# delete temporary data frames
read_count_df_lfn_read_count <- NULL
read_count_df_lnf_variant <- NULL
read_count_df_lnf_sample_replicate <- NULL
###
### keep repeatable occurrences
###
min_relicate_number = 2
read_count_df <- FilterMinReplicateNumber(read_count_df, min_relicate_number, write_csv=T, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, "FilterMinReplicateNumber", min_relicate_number)
###
### print output files
###
write.csv(stat_df, file = paste(outdir, "count_stat.csv", sep=""))
write.csv(read_count_df, file = paste(outdir, "read_count_final.csv", sep=""))
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the runtime
print(runtime)
View(stat_df)
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
stat_df <- get_stat("FilterLFN", NA)
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
stat_df <- get_stat(read_count_df, stat_df, "FilterLFN")
View(stat_df)
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="~/vtamR/local/out/small")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastqdir)
read_count_df$mod3 <- nchar(read_count_df$asv)
View(read_count_df)
result <- 10 %% 3
# Print the result
print(result)
read_count_df$mod3 <- nchar(read_count_df$asv) %% 3
View(read_count_df)
tmp <- read_count_df %>%
groupe_by(mod3)%>%
summarize(mod3)
tmp <- read_count_df %>%
groupe_by(mod3) %>%
summarize(mod3)
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(mod3)
View(tmp)
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3))
View(tmp)
length_modulo <- sort(length_modulo, decreasing = T, )
tmp <- sort(tmp, decreasing = T, )
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
sort(decreasing = F)
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
sort(length_modulo, decreasing = F)
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
View(tmp)
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(length_modulo)
View(tmp)
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
View(tmp)
my_modulo <- length_modulo[mod3,1]
my_modulo <- tmp[mod3,1]
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
View(tmp)
my_modulo <- tmp[1,mod3]
my_modulo <- tmp[1,"mod3"]
my_modulo
my_modulo <- as.integer(tmp[1,"mod3"])
my_modulo
View(tmp)
# get the modulo 3 the most frequent
my_modulo3 <- as.integer(tmp[1,"mod3"])
my_modulo3
read_count_df <- read_count_df %>%
filter(mod3 == my_modulo3)
View(read_count_df)
# delete the temporary colum
read_count_df$mod3 <- NULL
read_count_df <- function(read_count_df, write_csv=F, outdir){
# add a column with the modulo 3 of the length of the asvs
read_count_df$mod3 <- nchar(read_count_df$asv) %% 3
# make a tibble with modulo3 of the length of the ASVs and their count
# ASVs are counted as many times as they occur, so the most frequent ASV have higher weight
# read_counts are not taken into account
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
# get the modulo 3 the most frequent
my_modulo3 <- as.integer(tmp[1,"mod3"])
# select only the lines with asv length compatible with the most frequent modulo3
read_count_df <- read_count_df %>%
filter(mod3 == my_modulo3)
# delete the temporary colum
read_count_df$mod3 <- NULL
if(write_csv){
write.csv(read_count_df, file = paste(outdir, "FilerIndel.csv", sep=""))
}
return(read_count_df)
}
read_count_df <- FilerIndel(FilerIndel, write_csv=F, outdir=outdir)
FilterIndel <- function(read_count_df, write_csv=F, outdir){
# add a column with the modulo 3 of the length of the asvs
read_count_df$mod3 <- nchar(read_count_df$asv) %% 3
# make a tibble with modulo3 of the length of the ASVs and their count
# ASVs are counted as many times as they occur, so the most frequent ASV have higher weight
# read_counts are not taken into account
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
# get the modulo 3 the most frequent
my_modulo3 <- as.integer(tmp[1,"mod3"])
# select only the lines with asv length compatible with the most frequent modulo3
read_count_df <- read_count_df %>%
filter(mod3 == my_modulo3)
# delete the temporary colum
read_count_df$mod3 <- NULL
if(write_csv){
write.csv(read_count_df, file = paste(outdir, "FilerIndel.csv", sep=""))
}
return(read_count_df)
}
read_count_df <- FilterIndel(FilerIndel, write_csv=F, outdir=outdir)
FilterIndel <- function(read_count_df, write_csv=F, outdir){
# add a column with the modulo 3 of the length of the asvs
read_count_df$mod3 <- nchar(read_count_df$asv) %% 3
# make a tibble with modulo3 of the length of the ASVs and their count
# ASVs are counted as many times as they occur, so the most frequent ASV have higher weight
# read_counts are not taken into account
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
# get the modulo 3 the most frequent
my_modulo3 <- as.integer(tmp[1,"mod3"])
# select only the lines with asv length compatible with the most frequent modulo3
read_count_df <- read_count_df %>%
filter(mod3 == my_modulo3)
# delete the temporary colum
read_count_df$mod3 <- NULL
if(write_csv){
write.csv(read_count_df, file = paste(outdir, "FilerIndel.csv", sep=""))
}
return(read_count_df)
}
read_count_df <- FilterIndel(read_count_df, write_csv=F, outdir=outdir)
FilterIndel <- function(read_count_df, write_csv=F, outdir){
# add a column with the modulo 3 of the length of the asvs
read_count_df$mod3 <- nchar(read_count_df$asv) %% 3
# make a tibble with modulo3 of the length of the ASVs and their count
# ASVs are counted as many times as they occur, so the most frequent ASV have higher weight
# read_counts are not taken into account
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
# get the modulo 3 the most frequent
my_modulo3 <- as.integer(tmp[1,"mod3"])
# select only the lines with asv length compatible with the most frequent modulo3
read_count_df <- read_count_df %>%
filter(mod3 == my_modulo3)
# delete the temporary colum
read_count_df$mod3 <- NULL
if(write_csv){
write.csv(read_count_df, file = paste(outdir, "FilerIndel.csv", sep=""))
}
return(read_count_df)
}
read_count_df <- FilterIndel(read_count_df, write_csv=F, outdir=outdir)
View(stat_df)
s
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastqdir, write_csv=F, outdir=outdir)
FilterIndel <- function(read_count_df, write_csv=F, outdir){
# add a column with the modulo 3 of the length of the asvs
read_count_df$mod3 <- nchar(read_count_df$asv) %% 3
# make a tibble with modulo3 of the length of the ASVs and their count
# ASVs are counted as many times as they occur, so the most frequent ASV have higher weight
# read_counts are not taken into account
tmp <- read_count_df %>%
group_by(mod3) %>%
summarize(length_modulo=length(mod3)) %>%
arrange(desc(length_modulo))
# get the modulo 3 the most frequent
my_modulo3 <- as.integer(tmp[1,"mod3"])
# select only the lines with asv length compatible with the most frequent modulo3
read_count_df <- read_count_df %>%
filter(mod3 == my_modulo3)
# delete the temporary colum
read_count_df$mod3 <- NULL
if(write_csv){
write.csv(read_count_df, file = paste(outdir, "FilerIndel.csv", sep=""))
}
return(read_count_df)
}
read_count_df <- FilterIndel(read_count_df, write_csv=F, outdir=outdir)
View(read_count_df)
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"
outdir <- check_dir(dir="~/vtamR/local/out/small")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastqdir, write_csv=F, outdir=outdir)
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
###
### LFN_global_read_count
###
# Eliminate variants with less than global_read_count_cutoff reads in the dataset
global_read_count_cutoff = 2
read_count_df <- LFN_global_read_count(read_count_df, global_read_count_cutoff, write_csv=F, outdir=outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="LFN_global_read_count", params=global_read_count_cutoff)
###
### LFN_filters
###
# LFN_read_count
lfn_read_count_cutoff = 2
read_count_df_lfn_read_count <- LFN_read_count(read_count_df, lfn_read_count_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lfn_read_count, stat_df, stage="LFN_read_count", params=lfn_read_count_cutoff)
# LFN_sample_replicate (by column)
lfn_sample_replicate_cutoff = 0.1
read_count_df_lnf_sample_replicate <- LFN_sample_replicate(read_count_df, lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lnf_sample_replicate, stat_df, stage="LFN_sample_replicate", params=lfn_sample_replicate_cutoff)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.1
by_replicate = TRUE
read_count_df_lnf_variant <- LFN_variant(read_count_df, lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir)
param_values <- paste(lnf_variant_cutoff, by_replicate, sep=";")
stat_df <- get_stat(read_count_df_lnf_variant, stat_df, stage="LFN_variant", params=param_values)
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
read_count_df <- pool_LFN(read_count_df_lfn_read_count, read_count_df_lnf_variant, read_count_df_lnf_sample_replicate, write_csv=T, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterLFN")
# delete temporary data frames
read_count_df_lfn_read_count <- NULL
read_count_df_lnf_variant <- NULL
read_count_df_lnf_sample_replicate <- NULL
###
### keep repeatable occurrences
###
min_relicate_number = 2
read_count_df <- FilterMinReplicateNumber(read_count_df, min_relicate_number, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterMinReplicateNumber", params=min_relicate_number)
###
### FilerIndel
###
read_count_df <- FilerIndel(read_count_df, write_csv=T, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilerIndel")
read_count_df <- FilterIndel(read_count_df, write_csv=F, outdir=outdir)
###
### print output files
###
write.csv(stat_df, file = paste(outdir, "count_stat.csv", sep=""))
write.csv(read_count_df, file = paste(outdir, "read_count_final.csv", sep=""))
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the runtime
print(runtime)
###
### FilerIndel
###
read_count_df <- FilterIndel(read_count_df, write_csv=F, outdir=outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterIndel")
View(stat_df)
?substring
??string
seq <-"ACTACTACTACT"
s <- splitseq(seq, frame = 0, word = 3)
library(devtools)
library(roxygen2)
library("seqinr")
library("dplyr")
library("tidyr")
setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
seq <-"ACTACTACTACT"
s <- splitseq(seq, frame = 0, word = 3)
s
seq <-"ACTACTACTACT"
s <- splitseq(seq, frame = 0, word = 3)
?split
seq <-"ACTACTACTACT"
seq <- as.vector(seq)
s <- splitseq(seq, frame = 0, word = 3)
seq <- strsplit(seq, "")[[1]]
seq <-"ACTACTACTACT"
seq <- strsplit(seq, "")
seq <- strsplit(seq, "")[[1]]
??upper
seq <-toupper("ACTACTAcTACT")
# Split the string into a vector of characters
seq <- strsplit(seq, "")[[1]]
s <- splitseq(seq, frame = 0, word = 3)
####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"
# create the output directory and check the the slash at the end
outdir <- check_dir(dir="~/vtamR/local/out/small")
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastqdir, write_csv=F, outdir=outdir)
seqs <- read_count_df$asv
# Split the string into a vector of characters
seqs <- strsplit(seqs, "")[[1]]
seqs
seqs <- read_count_df$asv
seqs
seqs <- unique(read_count_df$asv)
seqs
seqs <-unique(read_count_df$asv)
seqs
f1 <- function(seq){
return(strsplit(seq, "")[[1]])
}
seqs1 <- apply(seqs, 1,f1)
seqs <-unique(read_count_df$asv)
f1 <- function(seq){
return(strsplit(seq, "")[[1]])
}
seqs1 <- lapply(seqs, f1)
seqs1
View(seqs1)
# get unique list of variants
seqs <-unique(read_count_df$asv)
type(seqs)
class(seqs)
# apply the function to each sequence in the vector
seqs1 <- lapply(seqs, f1)
f2 <- function(seq){
return(splitseq(seq, frame = 0, word = 3))
}
seqs2 <- lapply(seqs1, f2)
View(seqs2)
View(seqs2)
View(seqs2)
View(seqs1)
View(seqs1)
View(seqs2)
View(seqs1)
View(seqs2)
View(seqs2)
View(seqs2)
