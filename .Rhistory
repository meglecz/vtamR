}else if(file_type == "read_count"){
column_heading <- c("asv","asv_id","sample","replicate","read_count")
}else if(file_type == "read_count_sample"){
column_heading <- c("asv","asv_id","sample","read_count")
}else if(file_type == "asv_list"){
column_heading <- c("asv","asv_id")
}
# check if all essential columns are present
check_heading(column_heading, colnames(df), file=file)
# Check sample type, habitat homogeneity across replicates
if(file_type == "fastqinfo" || file_type == "fastainfo" || file_type == "sortedinfo" ){
#sample_type
tmp <- df %>%
select("sample","sample_type","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(sample_type)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent sample_type:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
#habitat
tmp <- df %>%
select("sample","habitat","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(habitat)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent habitat:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check sample_type
sample_type_unique <- c("negative", "mock", "real")
tmp <- unique(df$sample_type)
incorrect_sample_type <- tmp[!tmp %in% sample_type_unique]
if(length(incorrect_sample_type) > 0) {
msg <- paste("The following sample types are not acceptes:", paste(incorrect_sample_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# unique sample-replicate
tmp <- df %>%
select("sample","replicate") %>%
group_by(sample, replicate) %>%
summarize("n"=n(), .groups="drop_last") %>%
filter(n>1)
if(nrow(tmp) > 0){
msg <- paste("Sample-replicate combinations must be unique:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
if(file_type == "fastqinfo"){
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
tmp_rv <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_fw) %>%
summarize("rv_count"=n_distinct(fastq_rv)) %>%
filter(rv_count > 1)
tmp_fw <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_rv) %>%
summarize("fw_count"=n_distinct(fastq_fw)) %>%
filter(fw_count > 1)
if(nrow(tmp_rv)>0 || nrow(tmp_fw)>0) {
msg <- paste("The following fastq files have more than one pairs:", paste(tmp_fw$fastq_rv, tmp_rv$fastq_fw, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check if files exist
file_list_fw <- unique(df$fastq_fw)
file_list_rv <- unique(df$fastq_rv)
file_list <- c(file_list_fw, file_list_rv)
check_file_exists(dir=dir, file_list=file_list)
}
# check if tag combinations are unique within a file(pair)
if(file_type == "fastqinfo" || file_type == "fastainfo"){
if(file_type == "fastqinfo"){
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fastq_fw)
}else{
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fasta)
}
tmp <- tmp %>%
group_by(file, tag_fw, tag_rv) %>%
summarize(count = n(), .groups="drop_last") %>%
filter(count>1)
tmp$res <- paste(tmp$tag_fw, tmp$tag_rv, tmp$file, sep=" ")
if(nrow(tmp)>0) {
msg <- paste("The following  within file tag combinations are not unique:", paste(tmp$res, collapse = "\n"))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check action
if(file_type == "mock_composition" || file_type == "known_occurrences"){
action_type <- c("keep", "delete", "tolerate")
tmp <- unique(df$action)
incorrect_action_type <- tmp[!tmp %in% action_type]
if(length(incorrect_action_type) > 0) {
msg <- paste("The following actions types are not accepted:", paste(incorrect_action_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
}
mock_composition <- "vtamR_test/data/mock_composition_mfzr_test.csv"
check_fileinfo(file=mock_composition, dir=fastqdir, file_type="mock_composition", sep=sep)
asv_list <- "vtamR_test/data/asv_list_zfzr_test.csv"
check_fileinfo <- function(file, dir="", file_type="fastqinfo", sep=","){
df <- read.csv(file)
# define expected columns
if(file_type == "fastqinfo"){
column_heading <- c("tag_fw","primer_fw","tag_rv","primer_rv","sample","sample_type","habitat","replicate","fastq_fw","fastq_rv")
}else if(file_type == "fastainfo"){
column_heading <- c("tag_fw","primer_fw","tag_rv","primer_rv","sample","sample_type","habitat","replicate","fasta")
}else if(file_type == "sortedinfo"){
column_heading <- c("sample","sample_type","habitat","replicate","filename")
}else if(file_type == "mock_composition"){
column_heading <- c("sample","action","asv")
}else if(file_type == "known_occurrences"){
column_heading <- c("sample","action","asv")
}else if(file_type == "read_count"){
column_heading <- c("asv","asv_id","sample","replicate","read_count")
}else if(file_type == "read_count_sample"){
column_heading <- c("asv","asv_id","sample","read_count")
}else if(file_type == "asv_list"){
column_heading <- c("asv","asv_id")
}
# check if all essential columns are present
check_heading(column_heading, colnames(df), file=file)
# Check sample type, habitat homogeneity across replicates
if(file_type == "fastqinfo" || file_type == "fastainfo" || file_type == "sortedinfo" ){
#sample_type
tmp <- df %>%
select("sample","sample_type","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(sample_type)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent sample_type:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
#habitat
tmp <- df %>%
select("sample","habitat","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(habitat)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent habitat:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check sample_type
sample_type_unique <- c("negative", "mock", "real")
tmp <- unique(df$sample_type)
incorrect_sample_type <- tmp[!tmp %in% sample_type_unique]
if(length(incorrect_sample_type) > 0) {
msg <- paste("The following sample types are not accepted:", paste(incorrect_sample_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# unique sample-replicate
tmp <- df %>%
select("sample","replicate") %>%
group_by(sample, replicate) %>%
summarize("n"=n(), .groups="drop_last") %>%
filter(n>1)
if(nrow(tmp) > 0){
msg <- paste("Sample-replicate combinations must be unique:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
# check if files exist
if(file_type == "fastqinfo"){
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
tmp_rv <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_fw) %>%
summarize("rv_count"=n_distinct(fastq_rv)) %>%
filter(rv_count > 1)
tmp_fw <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_rv) %>%
summarize("fw_count"=n_distinct(fastq_fw)) %>%
filter(fw_count > 1)
if(nrow(tmp_rv)>0 || nrow(tmp_fw)>0) {
msg <- paste("The following fastq files have more than one pairs:", paste(tmp_fw$fastq_rv, tmp_rv$fastq_fw, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check if files exist
file_list_fw <- unique(df$fastq_fw)
file_list_rv <- unique(df$fastq_rv)
file_list <- c(file_list_fw, file_list_rv)
check_file_exists(dir=dir, file_list=file_list)
}
# check if tag combinations are unique within a file(pair)
if(file_type == "fastqinfo" || file_type == "fastainfo"){
if(file_type == "fastqinfo"){
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fastq_fw)
}else{
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fasta)
}
tmp <- tmp %>%
group_by(file, tag_fw, tag_rv) %>%
summarize(count = n(), .groups="drop_last") %>%
filter(count>1)
tmp$res <- paste(tmp$tag_fw, tmp$tag_rv, tmp$file, sep=" ")
if(nrow(tmp)>0) {
msg <- paste("The following  within file tag combinations are not unique:", paste(tmp$res, collapse = "\n"))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check action
if(file_type == "mock_composition" || file_type == "known_occurrences"){
action_type <- c("keep", "delete", "tolerate")
tmp <- unique(df$action)
incorrect_action_type <- tmp[!tmp %in% action_type]
if(length(incorrect_action_type) > 0) {
msg <- paste("The following actions types are not accepted:", paste(incorrect_action_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check if 1 to 1 relation between asv_id ad asv
if(file_type == "read_count" || file_type == "read_count_sample" || file_type == "asv_list" ){
tmp_asv_id <- df %>%
select("asv_id","asv") %>%
group_by(asv_id) %>%
summarize("asv_count"=n_distinct(asv)) %>%
filter(asv_count > 1)
tmp_asv <- df %>%
select("asv_id","asv") %>%
group_by(asv) %>%
summarize("asv_id_count"=n_distinct(asv_id)) %>%
filter(asv_id_count > 1)
if(nrow(tmp_asv_id)>0 || nrow(tmp_asv)>0) {
msg <- paste("The following ASVs or asv_id are not unique:", paste(tmp_asv_id$asv_count, tmp_asv$asv_id_count, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
}
check_fileinfo(file=mock_composition, dir=fastqdir, file_type="mock_composition", sep=sep)
check_fileinfo(file=asv_list, dir=fastqdir, file_type="asv_list", sep=sep)
check_fileinfo(file=asv_list, dir=fastqdir, file_type="asv_list", sep=sep)
check_fileinfo <- function(file, dir="", file_type="fastqinfo", sep=","){
df <- read.csv(file)
# define expected columns
if(file_type == "fastqinfo"){
column_heading <- c("tag_fw","primer_fw","tag_rv","primer_rv","sample","sample_type","habitat","replicate","fastq_fw","fastq_rv")
}else if(file_type == "fastainfo"){
column_heading <- c("tag_fw","primer_fw","tag_rv","primer_rv","sample","sample_type","habitat","replicate","fasta")
}else if(file_type == "sortedinfo"){
column_heading <- c("sample","sample_type","habitat","replicate","filename")
}else if(file_type == "mock_composition"){
column_heading <- c("sample","action","asv")
}else if(file_type == "known_occurrences"){
column_heading <- c("sample","action","asv")
}else if(file_type == "read_count"){
column_heading <- c("asv","asv_id","sample","replicate","read_count")
}else if(file_type == "read_count_sample"){
column_heading <- c("asv","asv_id","sample","read_count")
}else if(file_type == "asv_list"){
column_heading <- c("asv","asv_id")
}
# check if all essential columns are present
check_heading(column_heading, colnames(df), file=file)
# Check sample type, habitat homogeneity across replicates
if(file_type == "fastqinfo" || file_type == "fastainfo" || file_type == "sortedinfo" ){
#sample_type
tmp <- df %>%
select("sample","sample_type","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(sample_type)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent sample_type:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
#habitat
tmp <- df %>%
select("sample","habitat","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(habitat)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent habitat:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check sample_type
sample_type_unique <- c("negative", "mock", "real")
tmp <- unique(df$sample_type)
incorrect_sample_type <- tmp[!tmp %in% sample_type_unique]
if(length(incorrect_sample_type) > 0) {
msg <- paste("The following sample types are not accepted:", paste(incorrect_sample_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# unique sample-replicate
tmp <- df %>%
select("sample","replicate") %>%
group_by(sample, replicate) %>%
summarize("n"=n(), .groups="drop_last") %>%
filter(n>1)
if(nrow(tmp) > 0){
msg <- paste("Sample-replicate combinations must be unique:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
# check if files exist
if(file_type == "fastqinfo"){
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
tmp_rv <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_fw) %>%
summarize("rv_count"=n_distinct(fastq_rv)) %>%
filter(rv_count > 1)
tmp_fw <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_rv) %>%
summarize("fw_count"=n_distinct(fastq_fw)) %>%
filter(fw_count > 1)
if(nrow(tmp_rv)>0 || nrow(tmp_fw)>0) {
msg <- paste("The following fastq files have more than one pairs:", paste(tmp_fw$fastq_rv, tmp_rv$fastq_fw, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check if files exist
file_list_fw <- unique(df$fastq_fw)
file_list_rv <- unique(df$fastq_rv)
file_list <- c(file_list_fw, file_list_rv)
check_file_exists(dir=dir, file_list=file_list)
}
# check if tag combinations are unique within a file(pair)
if(file_type == "fastqinfo" || file_type == "fastainfo"){
if(file_type == "fastqinfo"){
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fastq_fw)
}else{
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fasta)
}
tmp <- tmp %>%
group_by(file, tag_fw, tag_rv) %>%
summarize(count = n(), .groups="drop_last") %>%
filter(count>1)
tmp$res <- paste(tmp$tag_fw, tmp$tag_rv, tmp$file, sep=" ")
if(nrow(tmp)>0) {
msg <- paste("The following  within file tag combinations are not unique:", paste(tmp$res, collapse = "\n"))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check action
if(file_type == "mock_composition" || file_type == "known_occurrences"){
action_type <- c("keep", "delete", "tolerate")
tmp <- unique(df$action)
incorrect_action_type <- tmp[!tmp %in% action_type]
if(length(incorrect_action_type) > 0) {
msg <- paste("The following actions types are not accepted:", paste(incorrect_action_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check if 1 to 1 relation between asv_id ad asv
if(file_type == "read_count" || file_type == "read_count_sample" || file_type == "asv_list" ){
tmp_asv_id <- df %>%
select("asv_id","asv") %>%
group_by(asv_id) %>%
summarize("asv_count"=n_distinct(asv)) %>%
filter(asv_count > 1)
tmp_asv <- df %>%
select("asv_id","asv") %>%
group_by(asv) %>%
summarize("asv_id_count"=n_distinct(asv_id)) %>%
filter(asv_id_count > 1)
if(nrow(tmp_asv_id)>0 || nrow(tmp_asv)>0) {
msg <- paste("The following ASVs or asv_id are not unique:", paste(tmp_asv_id$asv_id, tmp_asv$asv, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
}
check_fileinfo(file=asv_list, dir=fastqdir, file_type="asv_list", sep=sep)
check_fileinfo <- function(file, dir="", file_type="fastqinfo", sep=","){
df <- read.csv(file)
# define expected columns
if(file_type == "fastqinfo"){
column_heading <- c("tag_fw","primer_fw","tag_rv","primer_rv","sample","sample_type","habitat","replicate","fastq_fw","fastq_rv")
}else if(file_type == "fastainfo"){
column_heading <- c("tag_fw","primer_fw","tag_rv","primer_rv","sample","sample_type","habitat","replicate","fasta")
}else if(file_type == "sortedinfo"){
column_heading <- c("sample","sample_type","habitat","replicate","filename")
}else if(file_type == "mock_composition"){
column_heading <- c("sample","action","asv")
}else if(file_type == "known_occurrences"){
column_heading <- c("sample","action","asv")
}else if(file_type == "read_count"){
column_heading <- c("asv","asv_id","sample","replicate","read_count")
}else if(file_type == "read_count_sample"){
column_heading <- c("asv","asv_id","sample","read_count")
}else if(file_type == "asv_list"){
column_heading <- c("asv","asv_id")
}
# check if all essential columns are present
check_heading(column_heading, colnames(df), file=file)
# Check sample type, habitat homogeneity across replicates
if(file_type == "fastqinfo" || file_type == "fastainfo" || file_type == "sortedinfo" ){
#sample_type
tmp <- df %>%
select("sample","sample_type","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(sample_type)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent sample_type:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
#habitat
tmp <- df %>%
select("sample","habitat","replicate") %>%
group_by(sample) %>%
summarise(same_sample_type = n_distinct(habitat)) %>%
filter(same_sample_type > 1)
if(nrow(tmp) > 0){
msg <- paste("Samples with inconsistent habitat:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check sample_type
sample_type_unique <- c("negative", "mock", "real")
tmp <- unique(df$sample_type)
incorrect_sample_type <- tmp[!tmp %in% sample_type_unique]
if(length(incorrect_sample_type) > 0) {
msg <- paste("The following sample types are not accepted:", paste(incorrect_sample_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# unique sample-replicate
tmp <- df %>%
select("sample","replicate") %>%
group_by(sample, replicate) %>%
summarize("n"=n(), .groups="drop_last") %>%
filter(n>1)
if(nrow(tmp) > 0){
msg <- paste("Sample-replicate combinations must be unique:", paste(tmp$sample, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
# check if files exist
if(file_type == "fastqinfo"){
# check if fastq filepairs are coherent (e.g. 1 to 1 relation)
tmp_rv <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_fw) %>%
summarize("rv_count"=n_distinct(fastq_rv)) %>%
filter(rv_count > 1)
tmp_fw <- df %>%
select("fastq_fw","fastq_rv") %>%
group_by(fastq_rv) %>%
summarize("fw_count"=n_distinct(fastq_fw)) %>%
filter(fw_count > 1)
if(nrow(tmp_rv)>0 || nrow(tmp_fw)>0) {
msg <- paste("The following fastq files have more than one pairs:", paste(tmp_fw$fastq_rv, tmp_rv$fastq_fw, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
# check if files exist
file_list_fw <- unique(df$fastq_fw)
file_list_rv <- unique(df$fastq_rv)
file_list <- c(file_list_fw, file_list_rv)
check_file_exists(dir=dir, file_list=file_list)
}
# check if tag combinations are unique within a file(pair)
if(file_type == "fastqinfo" || file_type == "fastainfo"){
if(file_type == "fastqinfo"){
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fastq_fw)
}else{
tmp <- df %>%
select("tag_fw", "tag_rv", "file"=fasta)
}
tmp <- tmp %>%
group_by(file, tag_fw, tag_rv) %>%
summarize(count = n(), .groups="drop_last") %>%
filter(count>1)
tmp$res <- paste(tmp$tag_fw, tmp$tag_rv, tmp$file, sep=" ")
if(nrow(tmp)>0) {
msg <- paste("The following  within file tag combinations are not unique:", paste(tmp$res, collapse = "\n"))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check action
if(file_type == "mock_composition" || file_type == "known_occurrences"){
action_type <- c("keep", "delete", "tolerate")
tmp <- unique(df$action)
incorrect_action_type <- tmp[!tmp %in% action_type]
if(length(incorrect_action_type) > 0) {
msg <- paste("The following actions types are not accepted:", paste(incorrect_action_type, collapse = ", "))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
# check if 1 to 1 relation between asv_id ad asv
if(file_type == "read_count" || file_type == "read_count_sample" || file_type == "asv_list" ){
tmp_asv_id <- df %>%
select("asv_id","asv") %>%
group_by(asv_id) %>%
summarize("asv_count"=n_distinct(asv)) %>%
filter(asv_count > 1)
tmp_asv <- df %>%
select("asv_id","asv") %>%
group_by(asv) %>%
summarize("asv_id_count"=n_distinct(asv_id)) %>%
filter(asv_id_count > 1)
if(nrow(tmp_asv_id)>0 || nrow(tmp_asv)>0) {
msg <- paste("The following ASVs or asv_id are not unique:", paste(tmp_asv_id$asv_id, tmp_asv$asv, collapse = "\n"))
tryCatch(stop(msg), error = function(e) message(msg))
}
}
}
check_fileinfo(file=asv_list, dir=fastqdir, file_type="asv_list", sep=sep)
