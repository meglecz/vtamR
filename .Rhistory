library("devtools")
library("roxygen2")
library("seqinr") # splitseq for FilterCodonStop
library("dplyr")
library("tidyr") # gather for read_asv_table; pivot_wider in write_asvtable and stat_sample !!sym
library("utils") # to handle zipped files
library("ggplot2")
computer <- "Endoume" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
#     fastqdir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
#    outdir <- "vtamR_test/out_zfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
#      asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
outdir <- "/home/meglecz/vtamR_large_files/out/"
mock_composition <- "/home/meglecz/vtamR_large_files/user_input/mock_composition_mfzr.csv"
asv_list <- "/home/meglecz/vtamR_large_files/user_input/asv_list.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#    fastqdir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
#     outdir <- "vtamR_test/out_mfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
#     asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastqdir <- "~/vtamR_large_data"
fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
outdir <- "/home/emese/vtamR_large_data/out/"
mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
dir <- "home/emese/vtamR_large_data"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="Sea18_fasta_seq_count.csv", sep=",")
#' Efficient in linux-like systems, but slow on Windows for large files
#' Can handle gz compressed and uncompressed files, but not zipped files
#'
#' @param dir name of the input directory
#' @param pattern take files from input dir, if patter (regular expression) is present in the file name
#' @param file_type [fasta/fastq] if not specified, the number of lines is returned, otherwise the nulber of sequences
#' @param sep separator used in csv files
#' @param outfile name of the output file; optional, it is not given results are returned in a data frame, but no file is written
#' @export
#'
count_reads_dir<- function(dir, pattern=".fastq", file_type="", outfile="", sep=","){
dir <- check_dir(dir)
files <- list.files(path = dir, pattern=pattern)
df <- data.frame(
"filename"=files,
"read_count"=rep(NA, length(files))
)
for(i in 1:length(files)){
print(file_p)
file_p <- paste(dir, files[i], sep="")
n <- count_reads_file(file_p, file_type=file_type)
df[i, "read_count"] <- n
}
if(outfile != ""){
write.table(df, file=outfile, sep=sep, row.names = F)
}
return(df)
}
dir <- "home/emese/vtamR_large_data"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="Sea18_fasta_seq_count.csv", sep=",")
#' Efficient in linux-like systems, but slow on Windows for large files
#' Can handle gz compressed and uncompressed files, but not zipped files
#'
#' @param dir name of the input directory
#' @param pattern take files from input dir, if patter (regular expression) is present in the file name
#' @param file_type [fasta/fastq] if not specified, the number of lines is returned, otherwise the nulber of sequences
#' @param sep separator used in csv files
#' @param outfile name of the output file; optional, it is not given results are returned in a data frame, but no file is written
#' @export
#'
count_reads_dir<- function(dir, pattern=".fastq", file_type="", outfile="", sep=","){
dir <- check_dir(dir)
files <- list.files(path = dir, pattern=pattern)
df <- data.frame(
"filename"=files,
"read_count"=rep(NA, length(files))
)
for(i in 1:length(files)){
file_p <- paste(dir, files[i], sep="")
print(file_p)
n <- count_reads_file(file_p, file_type=file_type)
df[i, "read_count"] <- n
}
if(outfile != ""){
write.table(df, file=outfile, sep=sep, row.names = F)
}
return(df)
}
dir <- "home/emese/vtamR_large_data"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="Sea18_fasta_seq_count.csv", sep=",")
dir <- check_dir(dir)
files <- list.files(path = dir, pattern=pattern)
pattern=".fastq"
files <- list.files(path = dir, pattern=pattern)
files
files <- list.files(path = dir, pattern=pattern)
files
dir <- "home/emese/vtamR_large_data"
dir <- check_dir(dir)
dir
files <- list.files(path = dir, pattern=pattern)
files
dir <- "~/vtamR_large_data"
dir <- check_dir(dir)
dir
files <- list.files(path = dir, pattern=pattern)
files
dir <- "home/emese/vtamR_large_data"
dir <- check_dir(dir)
dir
files <- list.files(path = dir, pattern=pattern)
files
dir <- "~/vtamR_large_data"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="Sea18_fasta_seq_count.csv", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
dir <- "~/vtamR_large_data/out/random_seq"
View(df)
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="Sea18_fasta_seq_count.csv", sep=",")
dir <- "~/vtamR_large_data/out/random_seq"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fastq", file_type="fastq", outfile="Sea18_fasta_seq_count.csv", sep=",")
dir <- "~/vtamR_large_data/out/random_seq"
start_time <- Sys.time()
df <- count_reads_dir(dir, pattern=".fasta", file_type="fasta", outfile="Sea18_fasta_seq_count.csv", sep=",")
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(df)
View(df)
options(scipen=99999)
View(df)
options(scipen=0)
View(df)
