unlink("~/R/x86_64-pc-linux-gnu-library/4.0/vtamR", recursive = TRUE, force = TRUE)
file.exists("~/R/x86_64-pc-linux-gnu-library/4.0/vtamR")
getwd()
setwd("/home/meglecz/vtamR")
devtools::clean_dll()
devtools::document()
devtools::install(build_vignettes = FALSE, force = TRUE)
library(vtamR)
devtools::install(build_vignettes = TRUE)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
##see vignettes
vignette(package = "vtamR")
vignette("tutorial-vtamr-pipeline")
library(vtamR)
stat_df <- tibble(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
library(tibble)
stat_df <- tibble(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
library(vtamR)
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
library(vtamR)
# Windows
cutadapt_path <- "C:/Users/Public/cutadapt"
vsearch_path <- "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/vsearch"
blast_path <- "C:/Users/Public/blast-2.16.0+/bin/blastn"
swarm_path <- "C:/Users/Public/swarm-3.1.5-win-x86_64/bin/swarm"
num_threads <- 4
sep <- ","
# Linux
cutadapt_path <- "~/miniconda3/envs/vtam/bin/cutadapt" # v3.4
vsearch_path <- "~/miniconda3/envs/vtam/bin/vsearch" # v2.15.1
blast_path <- "~/miniconda3/envs/vtam/bin/blastn" # v2.10.1+
swarm_path <- "swarm" # v2.1.12
num_threads <- 8
sep <- ","
fastq_dir <- system.file("extdata/demo/fastq", package = "vtamR")
fastqinfo <-  system.file("extdata/demo/fastqinfo.csv", package = "vtamR")
mock_composition <-  system.file("extdata/demo/mock_composition.csv", package = "vtamR")
asv_list <-  system.file("extdata/demo/asv_list.csv", package = "vtamR")
# define output directory name
outdir <- file.path(normalizePath("~"), "vtamR_demo_out")
taxonomy <- system.file("extdata/db_test/taxonomy_reduced.tsv", package = "vtamR")
blast_db <- system.file("extdata/db_test", package = "vtamR")
blast_db <- file.path(blast_db, "COInr_reduced")
CheckFileinfo(file=fastqinfo, dir=fastq_dir, file_type="fastqinfo")
CheckFileinfo(file=mock_composition, file_type="mock_composition")
CheckFileinfo(file=asv_list, file_type="asv_list")
merged_dir <- file.path(outdir, "merged")
fastainfo_df <- Merge(fastqinfo,
fastq_dir=fastq_dir,
vsearch_path=vsearch_path,
outdir=merged_dir,
fastq_maxee=1,
fastq_maxns=0,
fastq_allowmergestagger=F
)
sorted_dir <- file.path(outdir, "sorted")
sortedinfo_df <- SortReads(fastainfo_df,
fasta_dir=merged_dir,
outdir=sorted_dir,
check_reverse=TRUE,
cutadapt_path=cutadapt_path,
vsearch_path=vsearch_path
)
outfile <- file.path(outdir, "1_before_filter.csv")
updated_asv_list <- file.path(outdir, "ASV_list_with_IDs.csv")
read_count_df <- Dereplicate(sortedinfo_df,
dir=sorted_dir,
outfile=outfile,
asv_list=asv_list,
updated_asv_list=updated_asv_list
)
stat_df <- tibble(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
View(stat_df)
by_sample <- TRUE
outfile <- file.path(outdir, "2_Swarm_by_sample.csv")
read_count_df <- Swarm(read_count_df,
outfile=outfile,
swarm_path=swarm_path,
num_threads=num_threads,
by_sample=by_sample
)
read_count_df <- Swarm(read_count_df,
outfile=outfile,
swarm_path=swarm_path,
num_threads=num_threads,
by_sample=by_sample
)
stat_df <- GetStat(read_count_df, stat_df, stage="Swarm", params=by_sample)
stat_df <- GetStat(read_count_df, stat_df, stage="Swarm", params=by_sample)
Histogram_ReadCountByVariant(read_count_df, binwidth=100)
print(stat_df)
global_read_count_cutoff = 2
outfile <- file.path(outdir, "3_LFNglobalReadCount.csv")
read_count_df <- LFNglobalReadCount(read_count_df,
cutoff=global_read_count_cutoff,
outfile=outfile
)
stat_df <- GetStat(read_count_df,
stat_df,
stage="LFNglobalReadCount",
params=global_read_count_cutoff
)
print(stat_df)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
print(stat_df, right = FALSE)
devtools::build(vignettes = TRUE)
vignette("tutorial-vtamr-pipeline")
devtools::install(build_vignettes = FALSE, force = TRUE)
vignette("tutorial-vtamr-pipeline")
getwd()
# USER
library("vtamR")
##see vignettes
vignette(package = "vtamR")
# test library
library(vtamR)
# install with vignettes
devtools::install(build_vignettes = TRUE)
vignette("tutorial-vtamr-pipeline")
