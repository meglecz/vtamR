blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#    fastq_dir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
#     outdir <- "vtamR_test/out_mfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
#     asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastq_dir <- "~/vtamR_large_data"
fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
outdir <- "/home/emese/vtamR_large_data/out/"
mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/Users/Public/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastq_dir <- "C:/Users/emese/vtamR_private/fastq/"
fastq_dir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
#  asv_list <- "vtamR_test/data/asv_list.csv"
asv_list <- "vtamR_test/out_mfzr/ASV_list_with_IDs.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params = "vtamR_test/data/ltg_params.csv"
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?PoolReplicates
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?TaxAssign
load_all(".")
roxygenise()
usethis::use_roxygen_md()
ltg_params = "vtamR_test/data/ltg_params.csv"
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
}
ltg_params = "vtamR_test/data/ltg_params.csv"
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?TaxAssign
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?TaxAssign
.run_blast
?run_blast
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?run_blast
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?read_blast_res
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?expand_rows
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?update_taxids
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?get_lineage_ids
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?get_lineage_ids
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?delete_1_by_row
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?make_ltg
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?get_ranked_lineages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?adjust_ltgres
load_all(".")
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?WriteASVtable
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?OptimizePCRerror
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?OptimizeLFNsampleReplicate
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?MakeKnownOccurrences
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?flag_from_mock
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?flag_from_habitat
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?make_missing_occurrences
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?OptimizeLFNreadCountLFNvariant
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?OptimizeLFNreadCountLFNvariant
library("devtools")
library("roxygen2")
library("seqinr") # splitseq for FilterCodonStop
library("dplyr")
library("tidyr") # gather for read_asv_table; pivot_wider in WriteAsVtable and stat_sample !!sym
#library("utils") # to handle zipped files
library("ggplot2")
vignette("rd")
computer <- "Windows" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastq_dir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list.csv"
#      fastq_dir <- "/home/meglecz/vtamR_large_files/fastq/"
#      fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
#     outdir <- "/home/meglecz/vtamR_large_files/out/"
#     mock_composition <- "/home/meglecz/vtamR_large_files/user_input/mock_composition_mfzr.csv"
#     asv_list <- "/home/meglecz/vtamR_large_files/user_input/asv_list.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#    fastq_dir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
#     outdir <- "vtamR_test/out_mfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
#     asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastq_dir <- "~/vtamR_large_data"
fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
outdir <- "/home/emese/vtamR_large_data/out/"
mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/Users/Public/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastq_dir <- "C:/Users/emese/vtamR_private/fastq/"
fastq_dir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
#  asv_list <- "vtamR_test/data/asv_list.csv"
asv_list <- "vtamR_test/out_mfzr/ASV_list_with_IDs.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params = "vtamR_test/data/ltg_params.csv"
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
load_all(".")
roxygenise()
usethis::use_roxygen_md()
load_all(".")
roxygenise()
usethis::use_roxygen_md()
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?PoolDatasets
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?HistoryBy
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
read_count_df <- read.csv("vtamR_test/out_mfzr/1_before_filter.csv")
View(read_count_df)
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
View(stat_df)
View(read_count_df)
View(ltg_params_df)
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
stat_df <- GetStat(read_count_df, stat_df, stage='Input', params=NA)
GetStat(read_count_df, stat_df, stage="LFNvariant", params="0.002;by_replicate=TRUE")
getwd()
outdir <- "vtamR_test/out_mfzr"
read_count_by_sample <- SummarizeBy(dir=outdir, feature="read_count", grouped_by="sample")
View(read_count_by_sample)
asv_by_sample <- SummarizeBy(dir=outdir, feature="asv", grouped_by="sample")
View(asv_by_sample)
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?SummarizeBy
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?write_df_to_fasta
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?select_sequences
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?read_fasta_to_df
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?RandomSeqWindows
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?count_reads_file
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?CountReadsDir
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?CheckFileinfo
load_all(".")
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?check_file_exists
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?check_heading
load_all(".")
roxygenise()
usethis::use_roxygen_md()
library("devtools")
library("roxygen2")
library("seqinr")
library("dplyr")
library("tidyr")
library("ggplot2")
load_all(".")
roxygenise()
usethis::use_roxygen_md()
cutadapt_path <- "C:/Users/Public/"
vsearch_path <- "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path <- "C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/Users/Public/swarm-3.1.4-win-x86_64/bin/"
num_threads <- 4
sep=","
taxonomy <- "C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/COInr_for_vtam_taxonomy.tsv"
blast_db <- "C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/COInr_for_vtam"
fastq_dir <- "vtamR_test/data/"
outdir <- "vtamR_test/out_mfzr/"
fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
asv_list <- "vtamR_test/data/asv_list.csv"
CheckFileinfo(file=fastqinfo, dir=fastq_dir, file_type="fastqinfo")
CheckFileinfo(file=mock_composition, file_type="mock_composition")
CheckFileinfo(file=asv_list, file_type="asv_list")
merged_dir <- paste(outdir, "merged/", sep="")
sortedinfo_df <- Merge(fastqinfo, fastq_dir=fastq_dir, vsearch_path=vsearch_path, outdir=merged_dir)
# merge and quality filter
merged_dir <- paste(outdir, "merged/", sep="")
fastainfo_df <- Merge(fastqinfo, fastq_dir=fastq_dir, vsearch_path=vsearch_path, outdir=merged_dir)
# demultiplex, trim tags and pimers
sorted_dir <- paste(outdir, "sorted/", sep="")
sortedinfo_df <- SortReads(fastainfo_df, fasta_dir=merged_dir, outdir=sorted_dir, check_reverse=TRUE, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path)
outfile <- paste(outdir, "1_before_filter.csv", sep="")
updated_asv_list <- paste(outdir, "ASV_list_with_IDs.csv", sep="")
read_count_df <- Dereplicate(sortedinfo_df, dir=sorted_dir, outfile=outfile, asv_list=asv_list, updated_asv_list=updated_asv_list)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
by_sample <- TRUE
outfile <- paste(outdir, "2_Swarm_by_sample.csv", sep="")
read_count_df <- Swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, by_sample=by_sample)
stat_df <- GetStat(read_count_df, stat_df, stage="Swarm", params=by_sample)
View(stat_df)
View(sortedinfo_df)
View(read_count_df)
View(read_count_df)
View(read_count_df)
global_read_count_cutoff = 2
outfile <- paste(outdir, "3_LFNglobalReadCount.csv", sep="")
read_count_df <- LFNglobalReadCount(read_count_df, cutoff=global_read_count_cutoff, outfile=outfile)
stat_df <- GetStat(read_count_df, stat_df, stage="LFNglobalReadCount", params=global_read_count_cutoff)
outfile <- paste(outdir, "4_FilterIndel.csv", sep="")
read_count_df <- FilterIndel(read_count_df, outfile=outfile)
stat_df <- GetStat(read_count_df, stat_df, stage="FilterIndel")
outfile <- paste(outdir, "5_FilterCodonStop.csv", sep="")
genetic_code = 5
read_count_df <- FilterCodonStop(read_count_df, outfile=outfile, genetic_code=genetic_code)
stat_df <- GetStat(read_count_df, stat_df, stage="FilerCodonStop", params=genetic_code)
abskew=2
by_sample = T
sample_prop = 0.8
outfile <- paste(outdir, "6_FilterChimera.csv", sep="")
read_count_df <- FilterChimera(read_count_df, outfile=outfile, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew)
params <- paste(abskew, by_sample, sample_prop, sep=";")
stat_df <- GetStat(read_count_df, stat_df, stage="FilterChimera", params=params)
# calculate renkonen distance among all replicates within sample
renkonen_within_df <- MakeRenkonenDistances(read_count_df, compare="within")
outfile <- paste(outdir, "7_FilterRenkonen.csv", sep="")
cutoff <- 0.4
read_count_df <- FilterRenkonen(read_count_df, outfile=outfile, cutoff=cutoff)
stat_df <- GetStat(read_count_df, stat_df, stage="FilerRenkonen", params=cutoff)
outfile <- paste(outdir, "ASV_taxa.csv", sep="")
asv_tax <- TaxAssign(asv=read_count_df, taxonomy=taxonomy, blast_db=blast_db, blast_path=blast_path, num_threads=num_threads, outfile=outfile)
tmp_read_count_samples_df <- PoolReplicates(read_count_df, outfile=outfile, sep=sep)
sortedinfo <- paste(sorted_dir, "sortedinfo.csv", sep ="")
tmp_asv_table <- WriteASVtable(tmp_read_count_samples_df, sortedinfo=sortedinfo, add_sums_by_asv=T, asv_tax=asv_tax)
asv_tpos1 <- tmp_asv_table %>%
select(tpos1, Total_number_of_reads, Number_of_samples, asv_id, phylum, class, order, family, genus, species, asv) %>%
filter(tpos1 > 0) %>%
arrange(desc(tpos1))
outfile <- paste(outdir, "OptimizePCRerror.csv", sep="")
OptimizePCRerror_df <- OptimizePCRerror(read_count_df, mock_composition=mock_composition, outfile=outfile, max_mismatch=2, min_read_count=5)
pcr_error_var_prop <- 0.05
max_mismatch <- 2
outfile <- paste(outdir, "8_FilterPCRerror.csv", sep="")
read_count_df <- FilterPCRerror(read_count_df, outfile=outfile, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch)
params <- paste(pcr_error_var_prop, max_mismatch, by_sample, sep=";")
stat_df <- GetStat(read_count_df, stat_df, stage="FilterPCRerror", params=params)
outfile = paste(outdir, "OptimizeLFNsampleReplicate.csv", sep="")
OptimizeLFNsampleReplicate_df <- OptimizeLFNsampleReplicate(read_count=read_count_df, mock_composition=mock_composition, outfile=outfile)
lfn_sample_replicate_cutoff <- 0.004
outfile <- paste(outdir, "9_LFNsampleReplicate.csv", sep="")
read_count_df <- LFNsampleReplicate(read_count_df, cutoff=lfn_sample_replicate_cutoff, outfile=outfile)
stat_df <- GetStat(read_count_df, stat_df, stage="LFNsampleReplicate", params=lfn_sample_replicate_cutoff)
## LFNvariant
# Set parameter values
min_replicate_number <- 2
outfile <- paste(outdir, "10_FilterMinReplicate.csv", sep="")
# Run filter and get stats
read_count_df <- FilterMinReplicate(read_count_df, min_replicate_number, outfile=outfile)
stat_df <- GetStat(read_count_df, stat_df, stage="FilterMinReplicate", params=min_replicate_number)
# Pool replicates
read_count_samples_df <- PoolReplicates(read_count_df)
# Detect known occurrences
results <- MakeKnownOccurrences(read_count_samples = read_count_samples_df, sortedinfo=sortedinfo, mock_composition=mock_composition)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
load_all(".")
roxygenise()
usethis::use_roxygen_md()
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, step="Input", params=NA)
load_all(".")
roxygenise()
usethis::use_roxygen_md()
load_all(".")
roxygenise()
usethis::use_roxygen_md()
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
load_all(".")
roxygenise()
usethis::use_roxygen_md()
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
stage <- "input"
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage=stage, params=NA)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
