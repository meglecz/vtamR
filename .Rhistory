Value = c(10, 15, 20)
long_data <- data.frame(
ID = 1:3,
"cond1.cond2.cond3" = c("plate1.marker1.sample1", "plate1.marker2.sample1", "plate1.marker1.sample2")
Value = c(10, 15, 20)
long_data <- data.frame(
ID = 1:3,
"cond1.cond2.cond3" = c("plate1.marker1.sample1", "plate1.marker2.sample1", "plate1.marker1.sample2"),
Value = c(10, 15, 20)
)
split_data <- separate(long_data, "cond1.cond2.cond3", into = c("Condition1", "Condition2", "Condition3"), sep = "\\.")
View(split_data)
df1 <- data.frame(
ID = 1:3,
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 28)
)
df2 <- data.frame(
ID = 3:1, # Reverse order of rows compared to df1
Name = c("Charlie", "Bob", "Alice"), # Order of names is different
Age = c(28, 30, 25) # Age values are in a different order
)
# Compare data frames ignoring row order and attributes
identical_except_order <- all.equal(df1, df2, check.attributes = FALSE, check.names = FALSE)
identical_except_order
View(df1)
View(df2)
View(df1)
View(df2)
if (is.logical(identical_except_order) && identical_except_order) {
print("The data frames are identical except for row order.")
} else {
print("The data frames are not identical.")
}
# Sample data frames
df1 <- data.frame(
ID = 1:3,
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 28)
)
df2 <- data.frame(
ID = 3:1, # Reverse order of rows compared to df1
Name = c("Charlie", "Bob", "Alice"), # Order of names is different
Age = c(28, 30, 25) # Age values are in a different order
)
# Compare data frames ignoring row order and attributes
result <- all.equal(df1, df2, check.attributes = FALSE, check.names = FALSE)
if (is.logical(result) && result) {
print("The data frames are identical except for row order.")
} else {
cat("The data frames are not identical. Differences:\n")
cat(result)
}
# Sample data frames
df1 <- data.frame(
ID = 1:3,
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 28)
)
df2 <- data.frame(
ID = 3:1, # Reverse order of rows compared to df1
Name = c("Charlie", "Bob", "Alice"), # Order of names is different
Age = c(28, 30, 25) # Age values are in a different order
)
# Sort both data frames by a unique identifier (e.g., ID)
df1_sorted <- df1[order(df1$ID), ]
df2_sorted <- df2[order(df2$ID), ]
# Compare sorted data frames
if (identical(df1_sorted, df2_sorted)) {
print("The data frames are identical except for row order.")
} else {
print("The data frames are not identical.")
}
# Sample data frames
df1 <- data.frame(
ID = 1:3,
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 28)
)
df2 <- data.frame(
ID = 3:1, # Reverse order of rows compared to df1
Name = c("Charlie", "Bob", "Alice"), # Order of names is different
Age = c(28, 30, 25) # Age values are in a different order
)
# Sort both data frames by a unique identifier (e.g., ID)
df1_sorted <- df1[order(df1$ID), ]
df2_sorted <- df2[order(df2$ID), ]
# Compare sorted data frames
if (identical(df1_sorted, df2_sorted)) {
print("The data frames are identical except for row order.")
} else {
print("The data frames are not identical.")
}
View(df1_sorted)
View(df2_sorted)
# Sample data frames
df1 <- data.frame(
ID = 1:3,
Name = c("Alice", "Bob", "Charlie"),
Age = c(25, 30, 28)
)
df2 <- data.frame(
ID = 3:1, # Reverse order of rows compared to df1
Name = c("Charlie", "Bob", "Alice"), # Order of names is different
Age = c(28, 30, 25) # Age values are in a different order
)
# Sort both data frames by a unique identifier (e.g., ID)
df1_sorted <- df1[order(df1$ID), ]
df2_sorted <- df2[order(df2$ID), ]
# Compare sorted data frames
if (identical(df1_sorted, df2_sorted)) {
print("The data frames are identical except for row order.")
} else {
print("The data frames are not identical.")
}
# Sample vector of logical values
logical_vector <- c(TRUE, TRUE, FALSE, TRUE, TRUE)
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
# Sample vector of logical values
logical_vector <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
# Sample vector of logical values
logical_vector <- c(TRUE, FALSE, FALSE, FALSE, FALSE)
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
# Sample vector of logical values
logical_vector <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
# Sample vector of logical values
logical_vector <- c(TRUE, TRUE, TRUE, TRUE, NA)
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
# Sample vector of logical values
logical_vector <- c(TRUE, TRUE, TRUE, TRUE, NA)
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
v1 <- c(12, 13, 14, NA)
v2 <- c(12, 13, 14, 15)
logical_vector <- v1==v2
logical_vector
# Check if there is at least one FALSE
if (any(!logical_vector)) {
print("At least one FALSE value is present in the vector.")
} else {
print("There are no FALSE values in the vector.")
}
library("devtools")
library("roxygen2")
library("seqinr") # splitseq for FilterCodonStop
library("dplyr")
library("tidyr") # gather for read_asv_table; pivot_wider in WriteAsVtable and stat_sample !!sym
#library("utils") # to handle zipped files
library("ggplot2")
computer <- "Windows" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastq_dir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
#      fastq_dir <- "/home/meglecz/vtamR_large_files/fastq/"
#      fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
#     outdir <- "/home/meglecz/vtamR_large_files/out/"
#     mock_composition <- "/home/meglecz/vtamR_large_files/user_input/mock_composition_mfzr.csv"
#     asv_list <- "/home/meglecz/vtamR_large_files/user_input/asv_list.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "~/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
#    fastq_dir <- "vtamR_test/data/"
#     fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
#     outdir <- "vtamR_test/out_mfzr/"
#     mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
#     asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
fastq_dir <- "~/vtamR_large_data"
fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
outdir <- "/home/emese/vtamR_large_data/out/"
mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastq_dir <- "C:/Users/emese/vtamR_private/fastq/"
fastq_dir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
outdir <- "vtamR_test/out_mfzr/"
mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
asv_list <- "vtamR_test/data/asv_list.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
?Merge
?check_dir
###
# Check coherence (often) user-made input files
###
# file_type [fastqinfo/fastainfo/sortedinfo/mock_composition/known_occurrences/read_count/read_count_sample/asv_list]
check_fileinfo(file=fastqinfo, dir=fastq_dir, file_type="fastqinfo", sep=sep)
check_fileinfo(file=mock_composition, file_type="mock_composition", sep=sep)
check_fileinfo(file=asv_list, file_type="asv_list", sep=sep)
###
# Test major functions
###
test_Merge_and_SortReads(test_dir="vtamR_test/", vsearch_path=vsearch_path, cutadapt_path=cutadapt_path)
?Merge
# load local packages
load_all(".")
roxygenise()
usethis::use_roxygen_md()
###
# Test major functions
###
test_Merge_and_SortReads(test_dir="vtamR_test/", vsearch_path=vsearch_path, cutadapt_path=cutadapt_path)
test_Filters(test_dir="vtamR_test/", swarm_path=swarm_path, vsearch_path=vsearch_path, sep=sep)
test_MakeKnownOccurrences(test_dir="vtamR_test/", sep=sep)
test_Optimize(test_dir="vtamR_test/", vsearch_path=vsearch_path)
test_TaxAssign(test_dir="vtamR_test/", sep=sep, blast_path=blast_path, num_threads=num_threads)
# create the output directory and check the the slash at the end
outdir <- check_dir(dir=outdir)
fastq_dir <- check_dir(dir=fastq_dir)
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
###
### Merge
###
fastq_ascii <- 33
fastq_maxdiffs <- 10
fastq_maxee <- 1
fastq_minlen <- 50
fastq_maxlen <- 500
fastq_minmergelen <- 50
fastq_maxmergelen <-500
fastq_maxns <- 0
fastq_truncqual <- 10
fastq_minovlen <- 50
fastq_allowmergestagger <- F
merged_dir <- paste(outdir, "merged/", sep="")
compress = F
# read fastqinfo
fastainfo_df <- Merge(fastqinfo, fastq_dir=fastq_dir, vsearch_path=vsearch_path, outdir=merged_dir, fastq_ascii=fastq_ascii, fastq_maxdiffs=fastq_maxdiffs, fastq_maxee=fastq_maxee, fastq_minlen=fastq_minlen, fastq_maxlen=fastq_maxlen, fastq_minmergelen=fastq_minmergelen, fastq_maxmergelen=fastq_maxmergelen, fastq_maxns=fastq_maxns, fastq_truncqual=fastq_truncqual, fastq_minovlen=fastq_minovlen, fastq_allowmergestagger=fastq_allowmergestagger, sep=sep, compress=compress)
#test_file <- '/home/emese/vtamR_large_data/out/merged/Sea18_COI_R1_S8_R1_001.fasta'
#cmd <- paste("gzip -k", test_file, sep=" ")
#system(cmd)
###
### RandomSeq
# RandomSeq is about 5 times quicker than RandomSeq_windows, and it is more memory efficient.
# However, RandomSeq does not work on Windows
###
randomseq_dir = paste(outdir, "random_seq/", sep="")
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
#fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
fastainfo_df <- RandomSeq(fastainfo, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=10000, randseed=0, compress=compress, sep=sep)
###
### SortReads
###
sorted_dir <- paste(outdir, "sorted/", sep="")
check_reverse <- T
tag_to_end <- F
primer_to_end <-F
cutadapt_error_rate <- 0.1 # -e in cutadapt
cutadapt_minimum_length <- 50 # -m in cutadapt
cutadapt_maximum_length <- 500 # -M in cutadapt
compress <- T
fastainfo <- paste(randomseq_dir, "fastainfo.csv", sep="")
sortedinfo_df <- SortReads(fastainfo_df, fasta_dir=randomseq_dir, outdir=sorted_dir, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path, check_reverse=check_reverse, tag_to_end=tag_to_end, primer_to_end=primer_to_end, cutadapt_error_rate=cutadapt_error_rate, cutadapt_minimum_length=cutadapt_minimum_length, cutadapt_maximum_length=cutadapt_maximum_length, sep=sep, compress=compress)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
library("devtools")
library("roxygen2")
library("seqinr")
library("dplyr")
library("tidyr")
library("ggplot2")
load_all(".")
roxygenise()
usethis::use_roxygen_md()
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
num_threads=4
sep=","
compress = F
taxonomy="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/COInr_for_vtam_taxonomy.tsv"
blast_db="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/COInr_for_vtam"
fastq_dir <- "vtamR_test/data/"
outdir <- "vtamR_test/out_mfzr/"
fastqinfo <- "vtamR_test/data/fastqinfo_mfzr.csv"
mock_composition <- "vtamR_test/data/mock_composition_mfzr.csv"
asv_list <- "vtamR_test/data/asv_list.csv"
check_fileinfo(file=fastqinfo, dir=fastq_dir, file_type="fastqinfo")
check_fileinfo(file=mock_composition, file_type="mock_composition")
check_fileinfo(file=asv_list, file_type="asv_list")
merged_dir <- paste(outdir, "merged/", sep="")
fastainfo_df <- Merge(fastqinfo, fastq_dir=fastq_dir, vsearch_path=vsearch_path, outdir=merged_dir)
# merge and quality filter
merged_dir <- paste(outdir, "merged/", sep="")
fastainfo_df <- Merge(fastqinfo, fastq_dir=fastq_dir, vsearch_path=vsearch_path, outdir=merged_dir)
# demultiplex, trim tags and pimers
sorted_dir <- paste(outdir, "sorted/", sep="")
sortedinfo_df <- SortReads(fastainfo_df, fasta_dir=merged_dir, outdir=sorted_dir, cutadapt_path=cutadapt_path, vsearch_path=vsearch_path)
outfile <- paste(outdir, "1_before_filter.csv", sep="")
updated_asv_list <- paste(outdir, "ASV_list_with_IDs.csv", sep="")
read_count_df <- read_fastas_from_sortedinfo(sortedinfo_df, dir=sorted_dir, outfile=outfile, asv_list=asv_list, updated_asv_list=updated_asv_list)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)
by_sample <- TRUE
outfile <- paste(outdir, "2_Swarm_by_sample.csv", sep="")
read_count_df <- Swarm(read_count_df, outfile=outfile, swarm_path=swarm_path, num_threads=num_threads, by_sample=by_sample)
stat_df <- get_stat(read_count_df, stat_df, stage="Swarm", params=by_sample)
global_read_count_cutoff = 2
outfile <- paste(outdir, "3_LFN_global_read_count.csv", sep="")
read_count_df <- LFN_global_read_count(read_count_df, cutoff=global_read_count_cutoff, outfile=outfile)
stat_df <- get_stat(read_count_df, stat_df, stage="LFN_global_read_count", params=global_read_count_cutoff)
outfile <- paste(outdir, "4_FilterIndel.csv", sep="")
read_count_df <- FilterIndel(read_count_df, outfile=outfile)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterIndel")
outfile <- paste(outdir, "5_FilterCodonStop.csv", sep="")
genetic_code = 5
read_count_df <- FilterCodonStop(read_count_df, outfile=outfile, genetic_code=genetic_code)
stat_df <- get_stat(read_count_df, stat_df, stage="FilerCodonStop", params=genetic_code)
abskew=2
by_sample = T
sample_prop = 0.8
outfile <- paste(outdir, "6_FilterChimera.csv", sep="")
read_count_df <- FilterChimera(read_count_df, outfile=outfile, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew)
params <- paste(abskew, by_sample, sample_prop, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="FilterChimera", params=params)
# calculate renkonen distance among all replicates within sample
renkonen_within_df <- make_renkonen_distances(read_count_df, compare="within")
# density plot
renkonen_density_plot <- density_plot_renkonen_distance(renkonen_within_df)
print(renkonen_density_plot)
# barplot
sortedinfo <- paste(sorted_dir, "sortedinfo.csv", sep="")
renkonen_barplot <- barplot_renkonen_distance(renkonen_within_df, sample_types=sortedinfo, x_axis_label_size=6)
print(renkonen_barplot)
outfile <- paste(outdir, "7_FilterRenkonen.csv", sep="")
cutoff <- 0.4
read_count_df <- FilterRenkonen(read_count_df, outfile=outfile, cutoff=cutoff)
stat_df <- get_stat(read_count_df, stat_df, stage="FilerRenkonen", params=cutoff)
outfile <- paste(outdir, "ASV_taxa.csv", sep="")
asv_tax <- TaxAssign(asv=read_count_df, taxonomy=taxonomy, blast_db=blast_db, blast_path=blast_path, num_threads=num_threads, outfile=outfile)
tmp_read_count_samples_df <- PoolReplicates(read_count_df, digits=0, outfile=outfile, sep=sep)
sortedinfo <- paste(sorted_dir, "sortedinfo.csv", sep ="")
tmp_asv_table <- WriteASVtable(tmp_read_count_samples_df, sortedinfo=sortedinfo, add_sums_by_asv=T, asv_tax=asv_tax)
asv_tpos1 <- tmp_asv_table %>%
select(tpos1, Total_number_of_reads, Number_of_samples, asv_id, phylum, class, order, family, genus, species, asv) %>%
filter(tpos1 > 0) %>%
arrange(desc(tpos1))
outfile <- paste(outdir, "OptimizePCRError.csv", sep="")
OptimizePCRError_df <- OptimizePCRError(read_count_df, mock_composition=mock_composition, outfile=outfile, max_mismatch=2, min_read_count=5)
pcr_error_var_prop <- 0.1
max_mismatch <- 2
outfile <- paste(outdir, "8_FilterPCRerror.csv", sep="")
read_count_df <- FilterPCRerror(read_count_df, outfile=outfile, vsearch_path=vsearch_path, pcr_error_var_prop=pcr_error_var_prop, max_mismatch=max_mismatch)
params <- paste(pcr_error_var_prop, max_mismatch, by_sample, sep=";")
stat_df <- get_stat(read_count_df, stat_df, stage="FilerPCRerror", params=params)
outfile = paste(outdir, "OptimizeLFNsampleReplicate.csv", sep="")
OptimizeLFNsampleReplicate_df <- OptimizeLFNsampleReplicate(read_count=read_count_df, mock_composition=mock_composition, outfile=outfile)
lfn_sample_replicate_cutoff <- 0.005
outfile <- paste(outdir, "9_LFN_sample_replicate.csv", sep="")
read_count_df_lnf_sample_replicate <- LFN_sample_replicate(read_count_df, cutoff=lfn_sample_replicate_cutoff, outfile=outfile)
stat_df <- get_stat(read_count_df_lnf_sample_replicate, stat_df, stage="LFN_sample_replicate", params=lfn_sample_replicate_cutoff)
## LFN_variant
# Set parameter values
min_replicate_number <- 2
outfile <- paste(outdir, "10_FilterMinReplicateNumber.csv", sep="")
# Run filter and get stats
read_count_df <- FilterMinReplicateNumber(read_count_df, min_replicate_number, outfile=outfile)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterMinReplicateNumber", params=min_replicate_number)
# Pool replicates
read_count_samples_df <- PoolReplicates(read_count_df)
# Detect known occurrences
results <- MakeKnownOccurrences(read_count_samples = read_count_samples_df, sortedinfo=sortedinfo, mock_composition=mock_composition)
# give explicit names to the 3 output data frames
known_occurrences_df <- results[[1]]
missing_occurrences_df <- results[[2]]
performance_metrics_df <- results[[3]]
outfile = paste(outdir, "OptimizeLFNReadCountAndLFNvariant.csv", sep="")
OptimizeLFNReadCountAndLFNvariant_df <- OptimizeLFNReadCountAndLFNvariant(read_count_df, known_occurrences=known_occurrences_df, outfile= outfile, min_replicate_number=2)
View(OptimizeLFNReadCountAndLFNvariant_df)
## LFN_variant
# Set parameter values
lnf_variant_cutoff = 0.001
outfile <- paste(outdir, "11_LFN_variant.csv", sep="")
# Run filter and get stats
read_count_df_lnf_variant <- LFN_variant(read_count_df, cutoff=lnf_variant_cutoff, outfile=outfile)
stat_df <- get_stat(read_count_df_lnf_variant, stat_df, stage="LFN_variant", params=lnf_variant_cutoff)
## LFN_read_count
# Set parameter values
lfn_read_count_cutoff <- 85
outfile <- paste(outdir, "12_LFN_read_count.csv", sep="")
# Run filter and get stats
read_count_df_lfn_read_count <- LFN_read_count(read_count_df, cutoff=lfn_read_count_cutoff, outfile=outfile)
stat_df <- get_stat(read_count_df_lfn_read_count, stat_df, stage="LFN_read_count", params=lfn_read_count_cutoff)
## Combine results
# Set parameter values
outfile <- paste(outdir, "13_pool_LFN.csv", sep="")
# Combine results and get stats
read_count_df <- pool_LFN(read_count_df_lfn_read_count, read_count_df_lnf_variant, outfile=outfile)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterLFN")
# delete temporary data frames
rm(read_count_df_lfn_read_count)
rm(read_count_df_lnf_variant)
## LFN_variant
# Set parameter values
min_replicate_number <- 2
outfile <- paste(outdir, "14_FilterMinReplicateNumber.csv", sep="")
# Run filter and get stats
read_count_df <- FilterMinReplicateNumber(read_count_df, min_replicate_number, outfile=outfile)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterMinReplicateNumber", params=min_replicate_number)
# Set parameter values
outfile <- paste(outdir, "15_PoolReplicates.csv", sep="")
read_count_samples_df <- PoolReplicates(read_count_df, outfile=outfile)
# Run function and get stats
stat_df <- get_stat(read_count_samples_df, stat_df, stage="PoolReplicates")
# Set parameter values
missing_occurrences <- paste(outdir, "missing_occurrences.csv", sep= "")
performance_metrics <- paste(outdir, "performance_metrics.csv", sep= "")
known_occurrences <- paste(outdir, "known_occurrences.csv", sep= "")
sortedinfo <- paste(sorted_dir, "sortedinfo.csv", sep ="")
# Run function
results <- MakeKnownOccurrences(read_count_samples_df, sortedinfo=sortedinfo, mock_composition=mock_composition, known_occurrences=known_occurrences, missing_occurrences=missing_occurrences, performance_metrics=performance_metrics)
# give explicit names to the 3 output data frames
known_occurrences_df <- results[[1]]
missing_occurrences_df <- results[[2]]
performance_metrics_df <- results[[3]]
# write ASV table completed by taxonomic assignments
outfile=paste(outdir, "Final_asvtable_with_taxassign.csv", sep="")
asv_table_df <- WriteASVtable(read_count_samples_df, outfile=outfile, asv_tax=asv_tax, sortedinfo=sortedinfo, add_empty_samples=T, add_sums_by_sample=T, add_sums_by_asv=T, add_expected_asv=T, mock_composition=mock_composition)
write.csv(stat_df, file = paste(outdir, "stat_steps.csv", sep=""))
?Merge
?SortReads
