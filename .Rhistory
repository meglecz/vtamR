View(input_df_tmp)
lnf_sample_replicate_df <- LFN_sample_replicate(input_df_tmp, cutoff=lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir, sep=sep)
lnf_sample_replicate_test_df = read_asv_table(filename=paste(test_dir, "test/test_file_sample_replicate_out.csv", sep=""), sep=sep)
resut_LFN_read_count <- compare_df(lnf_sample_replicate_df, resut_LFN_read_count, sort_columns, step="LFN_sample_replicate")
View(lnf_sample_replicate_test_df)
View(lnf_sample_replicate_df)
df1 <- global_read_count_cutoff_df
df2 <- global_read_count_cutoff_test_df
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
View(df1)
read_asv_table <- function(filename, sep=","){
df <- read.csv(filename, sep=sep)
long_df <- gather(df, key="plate.marker.sample.replicate", value ="read_count", -asv, -seq_id)  %>%
filter(read_count > 0) %>%
select(seq_id_exp=seq_id, read_count_exp<-read_count)
# separate column
long_df <- separate(long_df, "plate.marker.sample.replicate", into=c("plate", "marker", "sample", "replicate"), sep="\\.")
return(long_df)
}
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
read_asv_table <- function(filename, sep=","){
df <- read.csv(filename, sep=sep)
long_df <- gather(df, key="plate.marker.sample.replicate", value ="read_count", -asv, -seq_id)  %>%
filter(read_count > 0)
long_df <- long_df %>%
select(seq_id_exp=seq_id, "plate.marker.sample.replicate", read_count_exp<-read_count, "asv" )
# separate column
long_df <- separate(long_df, "plate.marker.sample.replicate", into=c("plate", "marker", "sample", "replicate"), sep="\\.")
return(long_df)
}
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
filename=test_input_file
df <- read.csv(filename, sep=sep)
View(df)
long_df <- gather(df, key="plate.marker.sample.replicate", value ="read_count", -asv, -seq_id)  %>%
filter(read_count > 0)
View(long_df)
long_df <- long_df %>%
select(seq_id_exp=seq_id, "plate.marker.sample.replicate", read_count_exp=read_count, "asv" )
# separate column
long_df <- separate(long_df, "plate.marker.sample.replicate", into=c("plate", "marker", "sample", "replicate"), sep="\\.")
#setwd("D:/vtamR")
# load local packages
load_all(".")
rm(list = c("read_asv_table"))
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
computer <- "Bombyx" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
setwd("~/vtamR")
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_mfzr_gz.csv"
outdir <- "vtamR_test/out/"
#  fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
#  fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
#  outdir <- "/home/meglecz/vtamR_large_files/out/"
mock_composition <- "local/user_input/mock_composition_mfzr_eu.csv"
num_threads=8
} else if (computer == "Endoume"){
setwd("~/vtamR")
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
db_path= "/home/emese/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "local/fastq/"
num_threads=8
}else if (computer == "Windows"){
setwd("C:/Users/emese/vtamR/")
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
num_threads=4
}
sep=";"
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
###
# Test merge
###
test_merge_and_sortreads(vsearch_path=vsearch_path, cutadapt_path=cutadapt_path)
test_dir <- check_dir(test_dir)
###
# Test filters
###
test_dir <- "/home/meglecz/vtamR/vtamR_test/"
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, write_csv=F, outdir=outdir, sep=sep)
#' read_asv_table
#'
#' Read asv table in wid format to a data frem in long format
#'
#' @param filename name of the input file including full path; columns: asv, seq_id, plate.marker.sample.replicate columns containing read counts
#' @param sep separator; default ","
#' @export
#'
read_asv_table <- function(filename, sep=","){
df <- read.csv(filename, sep=sep)
long_df <- gather(df, key="plate.marker.sample.replicate", value ="read_count", -asv, -seq_id)  %>%
filter(read_count > 0)
# separate column
long_df <- separate(long_df, "plate.marker.sample.replicate", into=c("plate", "marker", "sample", "replicate"), sep="\\.")
return(long_df)
}
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, write_csv=F, outdir=outdir, sep=sep)
global_read_count_cutoff_test_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
df1 <- global_read_count_cutoff_df
df2 <- global_read_count_cutoff_test_df
colnames(df1)
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
df1 <- df1 %>%
arrange("plate", "marker", "sample", "replicate", "asv")
df2 <- df2 %>%
arrange("plate", "marker", "sample", "replicate", "asv")
View(df1)
df1 <- global_read_count_cutoff_df
df2 <- global_read_count_cutoff_test_df
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
View(df1)
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
tmp <- df1$read_count == df1$read_count_vtamR
tmp
df1 <- global_read_count_cutoff_df
df2 <- global_read_count_cutoff_test_df
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
if(any(!comp)){
print(paste(step, ": FAIL", sep=""))
return(paste(step, ": FAIL", sep=""))
}else{
print(paste(step, ": PASS", sep=""))
return(paste(step, ": PASS", sep=""))
}
comp
any(!comp)
df1 <- global_read_count_cutoff_df
df2 <- global_read_count_cutoff_test_df
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
if(any(!comp)){
print(paste(step, ": FAIL", sep=""))
return(paste(step, ": FAIL", sep=""))
}else{
print(paste(step, ": PASS", sep=""))
return(paste(step, ": PASS", sep=""))
}
result <- paste(step, ": PASS", sep="")
step <-"toto"
df1 <- global_read_count_cutoff_df
df2 <- global_read_count_cutoff_test_df
step <-"toto"
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
if(any(!comp)){
result <- paste(step, ": FAIL", sep="")
}else{
result <- paste(step, ": PASS", sep="")
}
print(result)
return(result)
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, write_csv=F, outdir=outdir, sep=sep)
global_read_count_cutoff_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
result_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, sort_columns, step="LFN_global_read_count")
compare_df<- function(df1, df2, step=""){
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
if(any(!comp)){
result <- paste(step, ": FAIL", sep="")
}else{
result <- paste(step, ": PASS", sep="")
}
print(result)
return(result)
}
result_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, sort_columns, step="LFN_global_read_count")
result_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, step="LFN_global_read_count")
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
# LFN_sample_replicate (by column)
input_df_tmp <- input_df %>%
select(-seq_id)
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
result_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
compare_df<- function(df1, df2, step=""){
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
comp[which(is.na())] <- FALSE
if(any(!comp)){
result <- paste(step, ": FAIL", sep="")
}else{
result <- paste(step, ": PASS", sep="")
}
print(result)
return(result)
}
result_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
compare_df<- function(df1, df2, step=""){
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
comp[(is.na(comp))] <- FALSE
if(any(!comp)){
result <- paste(step, ": FAIL", sep="")
}else{
result <- paste(step, ": PASS", sep="")
}
print(result)
return(result)
}
result_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
compare_df<- function(df1, df2, step=""){
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
comp[(is.na(comp))] <- FALSE
if(any(!comp)){
result <- paste(step, ": FAIL", sep="")
}else{
result <- paste(step, ": PASS", sep="")
}
print(result)
return(df1)
}
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
View(comp_LFN_variant_replicate)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
View(comp_LFN_variant_replicate)
computer <- "Bombyx" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
setwd("~/vtamR")
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_mfzr_gz.csv"
outdir <- "vtamR_test/out/"
#  fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
#  fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
#  outdir <- "/home/meglecz/vtamR_large_files/out/"
mock_composition <- "local/user_input/mock_composition_mfzr_eu.csv"
num_threads=8
} else if (computer == "Endoume"){
setwd("~/vtamR")
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
db_path= "/home/emese/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "local/fastq/"
num_threads=8
}else if (computer == "Windows"){
setwd("C:/Users/emese/vtamR/")
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
num_threads=4
}
sep=";"
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?
compare_df<- function(df1, df2, step=""){
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
comp <- df1$read_count == df1$read_count_vtamR
comp[(is.na(comp))] <- FALSE
if(any(!comp)){
result <- paste(step, ": FAIL", sep="")
}else{
result <- paste(step, ": PASS", sep="")
}
print(result)
return(df1)
}
###
# Test filters
###
test_dir <- "/home/meglecz/vtamR/vtamR_test/"
test_filters <- function(test_dir=test_dir, vsearch_path=vsearch_path, cutadapt_path=cutadapt_path, sep=sep){
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, write_csv=F, outdir=outdir, sep=sep)
global_read_count_cutoff_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
comp_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, step="LFN_global_read_count")
### LFN_filters
# LFN_read_count
lfn_read_count_cutoff <- 10
lfn_read_count_df <- LFN_read_count(input_df, cutoff=lfn_read_count_cutoff, write_csv=F, outdir = outdir, sep=sep)
lfn_read_count_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_min_read_count_out.csv", sep=""), sep=sep)
comp_LFN_read_count <- compare_df(lfn_read_count_df, lfn_read_count_exp_df, step="LFN_read_count")
# LFN_sample_replicate (by column)
input_df_tmp <- input_df %>%
select(-seq_id)
lfn_sample_replicate_cutoff <- 0.001
lnf_sample_replicate_df <- LFN_sample_replicate(input_df_tmp, cutoff=lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir, sep=sep)
lnf_sample_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_sample_replicate_out.csv", sep=""), sep=sep)
comp_LFN_sample_replicate <- compare_df(lnf_sample_replicate_df, lnf_sample_replicate_exp_df, step="LFN_sample_replicate")
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
read_count_df <- pool_LFN(read_count_df_lfn_read_count, read_count_df_lnf_variant, read_count_df_lnf_sample_replicate, write_csv=F, outdir = outdir, sep=sep)
# delete temporary data frames
read_count_df_lfn_read_count <- NULL
read_count_df_lnf_variant <- NULL
read_count_df_lnf_sample_replicate <- NULL
}
test_dir <- check_dir(test_dir)
outdir <- paste(test_dir, "out", sep="")
outdir <- check_dir(outdir)
test_input_file <- paste(test_dir, "test/test_file.csv", sep="")
### make input df
input_df <- read_asv_table(filename=test_input_file, sep=sep)
#LFN_global_read_count
global_read_count_cutoff = 50
global_read_count_cutoff_df <- LFN_global_read_count(input_df, global_read_count_cutoff, write_csv=F, outdir=outdir, sep=sep)
global_read_count_cutoff_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_global_read_count50_out.csv", sep=""), sep=sep)
comp_LFN_global_read_count <- compare_df(global_read_count_cutoff_df, global_read_count_cutoff_exp_df, step="LFN_global_read_count")
### LFN_filters
# LFN_read_count
lfn_read_count_cutoff <- 10
lfn_read_count_df <- LFN_read_count(input_df, cutoff=lfn_read_count_cutoff, write_csv=F, outdir = outdir, sep=sep)
lfn_read_count_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_min_read_count_out.csv", sep=""), sep=sep)
comp_LFN_read_count <- compare_df(lfn_read_count_df, lfn_read_count_exp_df, step="LFN_read_count")
# LFN_sample_replicate (by column)
input_df_tmp <- input_df %>%
select(-seq_id)
lfn_sample_replicate_cutoff <- 0.001
lnf_sample_replicate_df <- LFN_sample_replicate(input_df_tmp, cutoff=lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir, sep=sep)
lnf_sample_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_sample_replicate_out.csv", sep=""), sep=sep)
comp_LFN_sample_replicate <- compare_df(lnf_sample_replicate_df, lnf_sample_replicate_exp_df, step="LFN_sample_replicate")
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
df1 <- lnf_variant_replicate_df
df2 <- lnf_variant_replicate_exp_df
step <-"toto"
df1 <- df1 %>%
select("asv", "plate","marker", "sample","replicate","read_count_vtamR"="read_count")
df1 <- full_join(df1, df2, by=c("plate", "marker", "sample", "replicate", "asv"))
df1 <- lnf_variant_replicate_df
df2 <- lnf_variant_replicate_exp_df
View(df1)
View(df2)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
View(comp_LFN_variant_replicate)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
View(comp_LFN_variant_replicate)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
View(comp_LFN_variant_replicate)
# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.01
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
# LFN_variant_replicate (by line)
lnf_variant_cutoff = 0.002
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate01_out.csv", sep=""), sep=sep)
# LFN_variant_replicate (by line)
lnf_variant_cutoff = 0.002
by_replicate = TRUE
lnf_variant_replicate_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_replicate_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant_replicate002_out.csv", sep=""), sep=sep)
comp_LFN_variant_replicate <- compare_df(lnf_variant_replicate_df, lnf_variant_replicate_exp_df, step="LFN_variant_replicate")
# LFN_variant (by line)
lnf_variant_cutoff = 0.002
by_replicate = FALSE
lnf_variant_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant002_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lnf_variant_df, lnf_variant_exp_df, step="LFN_variant_replicate")
View(comp_LFN_variant)
# LFN_variant (by line)
lnf_variant_cutoff = 0.002
by_replicate = FALSE
lnf_variant_df <- LFN_variant(input_df_tmp, cutoff=lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir, sep=sep)
lnf_variant_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_variant002_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lnf_variant_df, lnf_variant_exp_df, step="LFN_variant")
# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
lfn_pool_df <- pool_LFN(lfn_read_count_df, lnf_sample_replicate_df, lnf_variant_df, write_csv=F, outdir = outdir, sep=sep)
lnf_pool_exp_df = read_asv_table(filename=paste(test_dir, "test/test_file_pool_LFN_out.csv", sep=""), sep=sep)
comp_LFN_variant <- compare_df(lfn_pool_df, lnf_pool_exp_df, step="pool_LFN")
