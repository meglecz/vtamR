library(vtamR)
# Linux
cutadapt_path <- "~/miniconda3/envs/vtam/bin/cutadapt" # v3.4
vsearch_path <- "~/miniconda3/envs/vtam/bin/vsearch" # v2.15.1
blast_path <- "~/miniconda3/envs/vtam/bin/blastn" # v2.10.1+
swarm_path <- "swarm" # v2.1.12
num_threads <- 8
sep <- ","
fastq_dir <- system.file("extdata/demo/fastq", package = "vtamR")
outdir <- "~/vtamR_demo/out_mfzr"
fastqinfo <-  system.file("extdata/demo/fastqinfo_mfzr.csv", package = "vtamR")
mock_composition <-  system.file("extdata/demo/mock_composition_mfzr.csv", package = "vtamR")
asv_list <-  system.file("extdata/demo/asv_list.csv", package = "vtamR")
taxonomy <- system.file("extdata/db_test/taxonomy_reduced.tsv", package = "vtamR")
blast_db <- system.file("extdata/db_test", package = "vtamR")
blast_db <- file.path(blast_db, "COInr_reduced")
CheckFileinfo(file=fastqinfo, dir=fastq_dir, file_type="fastqinfo")
CheckFileinfo(file=mock_composition, file_type="mock_composition")
CheckFileinfo(file=asv_list, file_type="asv_list")
CheckFileinfo(file=fastqinfo, dir=fastq_dir, file_type="fastqinfo")
CheckFileinfo(file=mock_composition, file_type="mock_composition")
CheckFileinfo(file=asv_list, file_type="asv_list")
# merge and quality filter
merged_dir <- file.path(outdir, "merged")
fastainfo_df <- Merge(fastqinfo,
fastq_dir=fastq_dir,
vsearch_path=vsearch_path,
outdir=merged_dir
)
fastainfo_df <- Merge(fastqinfo,
fastq_dir=fastq_dir,
vsearch_path=vsearch_path,
outdir=merged_dir
)
# demultiplex, trim tags and pimers
sorted_dir <- file.path(outdir, "sorted")
sortedinfo_df <- SortReads(fastainfo_df,
fasta_dir=merged_dir,
outdir=sorted_dir,
check_reverse=TRUE,
cutadapt_path=cutadapt_path,
vsearch_path=vsearch_path
)
outfile <- file.path(outdir, "1_before_filter.csv")
updated_asv_list <- file.path(outdir, "ASV_list_with_IDs.csv")
read_count_df <- Dereplicate(sortedinfo_df,
dir=sorted_dir,
outfile=outfile,
asv_list=asv_list,
updated_asv_list=updated_asv_list
)
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
stat_df <- GetStat(read_count_df, stat_df, stage="Input", params=NA)
by_sample <- TRUE
outfile <- file.path(outdir, "2_Swarm_by_sample.csv")
read_count_df <- Swarm(read_count_df,
outfile=outfile,
swarm_path=swarm_path,
num_threads=num_threads,
by_sample=by_sample
)
read_count_df <- Swarm(read_count_df,
outfile=outfile,
swarm_path=swarm_path,
num_threads=num_threads,
by_sample=by_sample
)
stat_df <- GetStat(read_count_df, stat_df, stage="Swarm", params=by_sample)
print(stat_df)
Histogram_ReadCountByVariant(read_count_df, min_read_count=10, binwidth=100)
global_read_count_cutoff = 2
outfile <- file.path(outdir, "3_LFNglobalReadCount.csv")
read_count_df <- LFNglobalReadCount(read_count_df,
cutoff=global_read_count_cutoff,
outfile=outfile
)
stat_df <- GetStat(read_count_df,
stat_df,
stage="LFNglobalReadCount",
params=global_read_count_cutoff
)
print(stat_df)
outfile <- file.path(outdir, "4_FilterIndel.csv")
read_count_df <- FilterIndel(read_count_df, outfile=outfile)
stat_df <- GetStat(read_count_df, stat_df, stage="FilterIndel")
print(stat_df)
outfile <- file.path(outdir, "5_FilterCodonStop.csv")
genetic_code = 5
read_count_df <- FilterCodonStop(read_count_df, outfile=outfile, genetic_code=genetic_code)
stat_df <- GetStat(read_count_df, stat_df, stage="FilerCodonStop", params=genetic_code)
print(stat_df)
abskew=2
by_sample = T
sample_prop = 0.8
outfile <- file.path(outdir, "6_FilterChimera.csv")
read_count_df <- FilterChimera(read_count_df, outfile=outfile, vsearch_path=vsearch_path, by_sample=by_sample, sample_prop=sample_prop, abskew=abskew)
params <- paste(abskew, by_sample, sample_prop, sep=";")
stat_df <- GetStat(read_count_df, stat_df, stage="FilterChimera", params=params)
print(stat_df)
renkonen_within_df <- MakeRenkonenDistances(read_count_df, compare_all=FALSE)
DensityPlot_RenkonenDistance(renkonen_within_df)
Barplot_RenkonenDistance(renkonen_within_df, sample_types=sortedinfo_df, x_axis_label_size=6)
outfile <- file.path(outdir, "7_FilterRenkonen.csv")
cutoff <- 0.4
read_count_df <- FilterRenkonen(read_count_df, outfile=outfile, cutoff=cutoff)
stat_df <- GetStat(read_count_df, stat_df, stage="FilerRenkonen", params=cutoff)
print(stat_df)
read_count_df <- system.file("extdata/demo/7_FilterRenkonen.csv", package = "vtamR")
taxonomy <- system.file("extdata/db_test/taxonomy_reduced.tsv", package = "vtamR")
blast_db <- system.file("extdata/db_test", package = "vtamR")
blast_db <- file.path(blast_db, "COInr_reduced")
blast_path <- blast_path <- "~/miniconda3/envs/vtam/bin/blastn"
read_count_df <- system.file("extdata/demo/7_FilterRenkonen.csv", package = "vtamR")
taxonomy <- system.file("extdata/db_test/taxonomy_reduced.tsv", package = "vtamR")
blast_db <- system.file("extdata/db_test", package = "vtamR")
blast_db <- file.path(blast_db, "COInr_reduced")
blast_path <- blast_path <- "~/miniconda3/envs/vtam/bin/blastn"
num_threads = 8
asv_tax <- TaxAssign(asv=read_count_df,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
blast_path <- "~/miniconda3/envs/vtam/bin/blastn"
asv_tax <- TaxAssign(asv=read_count_df,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
?TaxAssign
system.file("extdata/demo/7_FilterRenkonen.csv", package = "vtamR")
read_count_file <- "extdata/demo/7_FilterRenkonen.csv"
asv_tax <- TaxAssign(asv=read_count_file,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
read_count_file <- "inst/extdata/demo/7_FilterRenkonen.csv"
asv_tax <- TaxAssign(asv=read_count_file,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
getwd()
setwd("/home/meglecz/vtamR")
getwd()
asv_tax <- TaxAssign(asv=read_count_file,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
read_count_file <- "/home/meglecz/vtamR/inst/extdata/demo/7_FilterRenkonen.csv"
asv_tax <- TaxAssign(asv=read_count_file,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
View(asv_tax)
read_count_samples_df <- PoolReplicates(read_count_df)
read_count_samples_df <- PoolReplicates(read_count_file)
outdir <- "~/vtamR_demo/out_mfzr"
sorted_dir <- file.path(outdir, "sorted")
sortedinfo <- file.path(sorted_dir, "sortedinfo.csv")
tmp_asv_table <- WriteASVtable(read_count_samples_df,
sortedinfo=sortedinfo,
add_sums_by_asv=T,
asv_tax=asv_tax)
asv_tpos1 <- tmp_asv_table %>%
select(tpos1, Total_number_of_reads, Number_of_samples, asv_id,
phylum, class, order, family, genus, species, asv
) %>%
filter(tpos1 > 0) %>%
arrange(desc(tpos1))
library("dplyr")
asv_tpos1 <- tmp_asv_table %>%
select(tpos1, Total_number_of_reads, Number_of_samples, asv_id,
phylum, class, order, family, genus, species, asv
) %>%
filter(tpos1 > 0) %>%
arrange(desc(tpos1))
View(asv_tpos1)
# Run checks before releasing a package
devtools::check()
# Adapt tutorial_vtamR.Rmd to vignette
# To Build, Code must execute or use eval=FALSE;
# Build execute vtam.Rmd to R and html to doc dir
# and creates a copy of vtamR.Rmd to doc as well.
# It the vignette needs to be edited, the file in
# vignettes/ should be edited and built again.
devtools::build_vignettes()
read_count_file <- system.file("extdata/demo/7_FilterRenkonen.csv", package = "vtamR")
read_count_file
# Adapt tutorial_vtamR.Rmd to vignette
# To Build, Code must execute or use eval=FALSE;
# Build execute vtam.Rmd to R and html to doc dir
# and creates a copy of vtamR.Rmd to doc as well.
# It the vignette needs to be edited, the file in
# vignettes/ should be edited and built again.
devtools::build_vignettes()
library(vtamR)
library(dplyr)
read_count_file <- system.file("extdata/demo/7_FilterRenkonen.csv", package = "vtamR")
taxonomy <- system.file("extdata/db_test/taxonomy_reduced.tsv", package = "vtamR")
blast_db <- system.file("extdata/db_test", package = "vtamR")
blast_db <- file.path(blast_db, "COInr_reduced")
blast_path <- "~/miniconda3/envs/vtam/bin/blastn"
num_threads = 8
read_count_file
asv_tax <- TaxAssign(asv=read_count_file,
taxonomy=taxonomy,
blast_db=blast_db,
blast_path=blast_path,
num_threads=num_threads
)
read_count_samples_df <- PoolReplicates(read_count_file)
outdir <- "~/vtamR_demo/out_mfzr"
sorted_dir <- file.path(outdir, "sorted")
sortedinfo <- file.path(sorted_dir, "sortedinfo.csv")
tmp_asv_table <- WriteASVtable(read_count_samples_df,
sortedinfo=sortedinfo,
add_sums_by_asv=T,
asv_tax=asv_tax)
asv_tpos1 <- tmp_asv_table %>%
select(tpos1, Total_number_of_reads, Number_of_samples, asv_id,
phylum, class, order, family, genus, species, asv
) %>%
filter(tpos1 > 0) %>%
arrange(desc(tpos1))
# Adapt tutorial_vtamR.Rmd to vignette
# To Build, Code must execute or use eval=FALSE;
# Build execute vtam.Rmd to R and html to doc dir
# and creates a copy of vtamR.Rmd to doc as well.
# It the vignette needs to be edited, the file in
# vignettes/ should be edited and built again.
devtools::build_vignettes()
# Run checks before releasing a package
devtools::check()
### to test as a package
# Install the package
devtools::install()
