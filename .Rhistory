runtime <- end_time - start_time  # Calculate the run time
print(runtime)
#fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
#fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq_update(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
input_fasta
RandomSeq_update <- function(fastainfo_df, fasta_dir="", outdir="", vsearch_path="", n, randseed=0, compress=F, sep=","){
# quite fast for uncompressed and gz files
fasta_dir<- check_dir(fasta_dir)
vsearch_path<- check_dir(vsearch_path)
outdir<- check_dir(outdir)
fastainfo_df$new_file <- NA
fastainfo_df$read_count <- NA
unique_fasta <- unique(fastainfo_df$fasta)
for(i in 1:length(unique_fasta)){ # go through all fasta files
input_fasta <- unique_fasta[i]
# stop if zip file
if(endsWith(input_fasta, ".zip")){
stop("Zip files are not supported")
}
# adjust output filename in function of the compression
output_fasta <- input_fasta
if(compress && !endsWith(output_fasta, ".gz")){
output_fasta <- paste(output_fasta, ".gz", sep="")
}
if(!compress && endsWith(output_fasta, ".gz")){
output_fasta <- sub(".gz$", "", output_fasta)
}
input_fasta_p <- paste(fasta_dir, input_fasta, sep="")
output_fasta_p <- paste(outdir, input_fasta, sep="")
seq_n <- count_seq(file=input_fasta_p)
if(n > seq_n ){ # not enough seq
# print msg
msg <- paste("WARNING:", input_fasta_p,"has",seq_n,"sequences, which is lower than", n,". The file is copied to the",outdir,"directory without subsampling", sep=" ")
print(msg)
# copy and compress/decompress input file according to the need
if(compress && !endsWith(input_fasta_p, ".gz")){ # input uncompressed, and compress = T
output <- compress_file(filename=input_fasta_p, remove_input=F) # compress input, keep original
file.rename(output, output_fasta_p) # move compressed file to the target location
}else{
if(!compress && endsWith(input_fasta_p, ".gz")){ # input compressed, and compress = F
output <- decompress_file(filename=input_fasta_p, remove_input=F) # compress input, keep original
file.rename(output, output_fasta_p) # move compressed file to the target location
}else{ # output, input same compression
file.copy(input_fasta_p, output_fasta_p)
}
}
fastainfo_df$new_file[which(fastainfo_df$fasta==input_fasta)] <- output_fasta
fastainfo_df$read_count[which(fastainfo_df$fasta==input_fasta)] <- seq_n
next()
} # not enough seq
# enough seq => resample
options(scipen=100) # do not transform large numbers to scentific forms, since it would lead to an error in vsearch
output_fasta_p <- gsub(".gz", "", output_fasta_p) # vsearch makes decompressed files
vsearch_cmd <- paste(vsearch_path, "vsearch --fastx_subsample ", input_fasta_p, " --fastaout ", output_fasta_p, " --sample_size ", n, " --randseed ", randseed, sep="")
print(vsearch_cmd)
system(vsearch_cmd)
options(scipen=0)
if(compress){ # compress the output file
output_fasta_p <- compress_file(filename=output_fasta_p, remove_input=T)
}
fastainfo_df$new_file[which(fastainfo_df$fasta==input_fasta)] <- output_fasta
fastainfo_df$read_count[which(fastainfo_df$fasta==input_fasta)] <- n
}# all files
fastainfo_df <- fastainfo_df %>%
select(tag_fw,primer_fw,tag_rv,primer_rv,sample,sample_type,habitat,replicate, fasta=new_file, read_count)
new_fastainfo <- paste(outdir, "fastainfo.csv", sep="")
write.table(fastainfo_df, file = new_fastainfo,  row.names = F, sep=sep)
return(new_fastainfo)
}
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq_update(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
RandomSeq_update <- function(fastainfo_df, fasta_dir="", outdir="", vsearch_path="", n, randseed=0, compress=F, sep=","){
# quite fast for uncompressed and gz files
fasta_dir<- check_dir(fasta_dir)
vsearch_path<- check_dir(vsearch_path)
outdir<- check_dir(outdir)
fastainfo_df$new_file <- NA
fastainfo_df$read_count <- NA
unique_fasta <- unique(fastainfo_df$fasta)
for(i in 1:length(unique_fasta)){ # go through all fasta files
input_fasta <- unique_fasta[i]
print(input_fasta)
# stop if zip file
if(endsWith(input_fasta, ".zip")){
stop("Zip files are not supported")
}
# adjust output filename in function of the compression
output_fasta <- input_fasta
if(compress && !endsWith(output_fasta, ".gz")){
output_fasta <- paste(output_fasta, ".gz", sep="")
}
if(!compress && endsWith(output_fasta, ".gz")){
output_fasta <- sub(".gz$", "", output_fasta)
}
input_fasta_p <- paste(fasta_dir, input_fasta, sep="")
output_fasta_p <- paste(outdir, input_fasta, sep="")
seq_n <- count_seq(file=input_fasta_p)
if(n > seq_n ){ # not enough seq
# print msg
msg <- paste("WARNING:", input_fasta_p,"has",seq_n,"sequences, which is lower than", n,". The file is copied to the",outdir,"directory without subsampling", sep=" ")
print(msg)
# copy and compress/decompress input file according to the need
if(compress && !endsWith(input_fasta_p, ".gz")){ # input uncompressed, and compress = T
output <- compress_file(filename=input_fasta_p, remove_input=F) # compress input, keep original
file.rename(output, output_fasta_p) # move compressed file to the target location
}else{
if(!compress && endsWith(input_fasta_p, ".gz")){ # input compressed, and compress = F
output <- decompress_file(filename=input_fasta_p, remove_input=F) # compress input, keep original
file.rename(output, output_fasta_p) # move compressed file to the target location
}else{ # output, input same compression
file.copy(input_fasta_p, output_fasta_p)
}
}
fastainfo_df$new_file[which(fastainfo_df$fasta==input_fasta)] <- output_fasta
fastainfo_df$read_count[which(fastainfo_df$fasta==input_fasta)] <- seq_n
next()
} # not enough seq
# enough seq => resample
options(scipen=100) # do not transform large numbers to scentific forms, since it would lead to an error in vsearch
output_fasta_p <- gsub(".gz", "", output_fasta_p) # vsearch makes decompressed files
vsearch_cmd <- paste(vsearch_path, "vsearch --fastx_subsample ", input_fasta_p, " --fastaout ", output_fasta_p, " --sample_size ", n, " --randseed ", randseed, sep="")
print(vsearch_cmd)
system(vsearch_cmd)
options(scipen=0)
if(compress){ # compress the output file
output_fasta_p <- compress_file(filename=output_fasta_p, remove_input=T)
}
fastainfo_df$new_file[which(fastainfo_df$fasta==input_fasta)] <- output_fasta
fastainfo_df$read_count[which(fastainfo_df$fasta==input_fasta)] <- n
}# all files
fastainfo_df <- fastainfo_df %>%
select(tag_fw,primer_fw,tag_rv,primer_rv,sample,sample_type,habitat,replicate, fasta=new_file, read_count)
new_fastainfo <- paste(outdir, "fastainfo.csv", sep="")
write.table(fastainfo_df, file = new_fastainfo,  row.names = F, sep=sep)
return(new_fastainfo)
}
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq_update(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
merged_dir
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq_update(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
#fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq_update(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq_update(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
library("devtools")
library("roxygen2")
library("seqinr") # splitseq for FilterCodonStop
library("dplyr")
library("tidyr") # gather for read_asv_table; pivot_wider in write_asvtable and stat_sample !!sym
library("utils") # to handle zipped files
library("ggplot2")
computer <- "Bombyx" # Bombyx/Endoume/Windows
if(computer == "Bombyx"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/meglecz/miniconda3/envs/vtam_2/bin/"
vsearch_path = ""
blast_path="~/ncbi-blast-2.11.0+/bin/" # bombyx
swarm_path <- ""
db_path="~/mkLTG/COInr_for_vtam_2022_05_06_dbV5/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_updated_2024_02_19_after_swarm.csv"
#    fastqdir <- "/home/meglecz/vtamR_large_files/fastq/"
#    fastqinfo <- "/home/meglecz/vtamR_large_files/user_input/fastqinfo_mfzr.csv"
#   outdir <- "/home/meglecz/vtamR_large_files/out/"
#   mock_composition <- "/home/meglecz/vtamR_large_files/user_input/mock_composition_mfzr.csv"
#   asv_list <- "/home/meglecz/vtamR_large_files/user_input/asv_list.csv"
num_threads=8
compress = T
} else if (computer == "Endoume"){
vtam_dir <- "~/vtamR"
cutadapt_path="/home/emese/miniconda3/bin/"
vsearch_path = "/home/emese/miniconda3/bin/"
blast_path= "" # deactivate conda
swarm_path <- ""
db_path= "/home/emese/mkCOInr/COInr/COInr_for_vtam_2023_05_03_dbV5/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
#    fastqdir <- "~/vtamR_large_data"
#    fastqinfo <- "~/vtamR_large_data/metadata/fastqinfo_Sea18_IIICBR_vtamR.csv"
#    outdir <- "/home/emese/vtamR_out_large_dataset/"
#    mock_composition <- "~/vtamR_large_data/metadata/mock_composition_Sea18_IIICBR_vtamR.csv"
#    asv_list <- "~/vtamR_large_data/metadata/asv_list.csv"
num_threads=8
compress = T
}else if (computer == "Windows"){
vtam_dir <- "C:/Users/emese/vtamR/"
cutadapt_path="C:/Users/Public/"
vsearch_path = "C:/Users/Public/vsearch-2.23.0-win-x86_64/bin/"
blast_path="C:/Users/Public/blast-2.14.1+/bin/"
swarm_path <- "C:/swarm-3.1.4-win-x86_64/bin/"
db_path="C:/Users/Public/COInr_for_vtam_2023_05_03_dbV5/"
#  fastqdir <- "C:/Users/emese/vtamR_private/fastq/"
fastqdir <- "vtamR_test/data/"
fastqinfo <- "vtamR_test/data/fastqinfo_zfzr.csv"
outdir <- "vtamR_test/out_zfzr/"
mock_composition <- "vtamR_test/data/mock_composition_zfzr.csv"
asv_list <- "vtamR_test/data/asv_list_zfzr.csv"
num_threads=4
compress = F
}
sep=","
setwd(vtam_dir)
taxonomy=paste(db_path, "COInr_for_vtam_taxonomy.tsv", sep="")
blast_db=paste(db_path, "COInr_for_vtam", sep="")
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c("species","species","species","genus","family","family"),
ltgres=c("species","species","species","species", "genus","genus")
)
ltg_params_df = data.frame( pid=c(100,97,95,90,85,80),
pcov=c(70,70,70,70,70,70),
phit=c(70,70,70,70,70,70),
taxn=c(1,1,2,3,4,4),
seqn=c(1,1,2,3,4,4),
refres=c(8,8,8,7,6,6),
ltgres=c(8,8,8,8,7,7)
)
#setwd("D:/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files
# create the output directory and check the the slash at the end
outdir <- check_dir(dir=outdir)
fastqdir <- check_dir(dir=fastqdir)
# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time
# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
asv_count=integer(),
read_count=integer(),
sample_count=integer(),
sample_replicate_count=integer())
###
### Merge
###
fastq_ascii <- 33
fastq_maxdiffs <- 10
fastq_maxee <- 1
fastq_minlen <- 50
fastq_maxlen <- 500
fastq_minmergelen <- 50
fastq_maxmergelen <-500
fastq_maxns <- 0
fastq_truncqual <- 10
fastq_minovlen <- 50
fastq_allowmergestagger <- F
merged_dir <- paste(outdir, "merged/", sep="")
compress = T
# read fastqinfo
fastqinfo_df <- read.csv(fastqinfo, header=T, sep=sep)
fastainfo_df <- Merge(fastqinfo_df=fastqinfo_df, fastqdir=fastqdir, vsearch_path=vsearch_path, outdir=merged_dir, fastq_ascii=fastq_ascii, fastq_maxdiffs=fastq_maxdiffs, fastq_maxee=fastq_maxee, fastq_minlen=fastq_minlen, fastq_maxlen=fastq_maxlen, fastq_minmergelen=fastq_minmergelen, fastq_maxmergelen=fastq_maxmergelen, fastq_maxns=fastq_maxns, fastq_truncqual=fastq_truncqual, fastq_minovlen=fastq_minovlen, fastq_allowmergestagger=fastq_allowmergestagger, sep=sep, compress=compress)
###
### RandomSeq
# RandomSeq is about 5 times quicker than RandomSeq_windows, and it is more memory efficient.
# However, RandomSeq does not work on Windows
###
randomseq_dir = paste(outdir, "random_seq/", sep="")
#fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
#fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fasta_dir=merged_dir
fastainfo_df
View(fastainfo_df)
outdir=randomseq_dir
outdir
n=1000
randseed=0
fasta_dir<- check_dir(fasta_dir)
outdir<- check_dir(outdir)
outdir<- check_dir(outdir)
unique_fasta <- unique(fastainfo_df$fasta)
unique_fasta
for(i in 1:length(unique_fasta)){ # go through all fasta files
input_fasta <- unique_fasta[i]
input_fasta_p <- paste(fasta_dir, input_fasta, sep="")
selected_seq_df <- select_sequences(file=input_fasta_p, n, randseed=randseed)
outfile <- paste(outdir, input_fasta, sep="")
outfile <- write_df_to_fasta(selected_seq_df, out=outfile, compress=compress) # the extension of the outfile will be adjusted according to compress
outfile <- sub(outdir, "", outfile)
fastainfo_df$fasta[which(fastainfo_df$fasta == input_fasta)] <- outfile
fastainfo_df$read_count[which(fastainfo_df$fasta == input_fasta)] <- nrow(selected_seq_df)
} # end for
View(fastainfo_df)
View(fastainfo_df)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
View(fastainfo_df)
merged_dir
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
View(fastainfo_df)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
View(fastainfo_df)
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeq(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, vsearch_path=vsearch_path, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(fastainfo_df)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(fastainfo_df)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(fastainfo_df)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
View(fastainfo_df)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(fastainfo_df)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(fastainfo_df)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
View(fastainfo_df)
#'
#' @param fastainfo_df data frame with a 'fasta' column containing input file names; files can be compressed in gz and zip format
#' @param fasta_dir directory that contains the input fasta files
#' @param n integer; the number of randomly selected sequences
#' @param outdir directory for the output files
#' @param randseed positive integer; seed for random sampling; 0 by default means to use a pseudo-random seed, a given non-zero seed produce always the same result
#' @param compress [T/F] is TRUE, the output file will be compressed
#' @param sep separator used in csv files; default: ","
#' @export
#'
RandomSeqWindows <- function(fastainfo_df, fasta_dir="", outdir="", n, randseed=0, compress=T, sep=","){
fasta_dir<- check_dir(fasta_dir)
outdir<- check_dir(outdir)
unique_fasta <- unique(fastainfo_df$fasta)
for(i in 1:length(unique_fasta)){ # go through all fasta files
input_fasta <- unique_fasta[i]
input_fasta_p <- paste(fasta_dir, input_fasta, sep="")
selected_seq_df <- select_sequences(file=input_fasta_p, n, randseed=randseed)
fastainfo_df$read_count[which(fastainfo_df$fasta == input_fasta)] <- nrow(selected_seq_df)
outfile <- paste(outdir, input_fasta, sep="")
outfile <- write_df_to_fasta(selected_seq_df, out=outfile, compress=compress) # the extension of the outfile will be adjusted according to compress
outfile <- sub(outdir, "", outfile)
fastainfo_df$fasta[which(fastainfo_df$fasta == input_fasta)] <- outfile
fastainfo_df$read_count[which(fastainfo_df$fasta == input_fasta)] <- nrow(selected_seq_df)
} # end for
write.table(fastainfo_df, file = paste(outdir, "fastainfo.csv", sep=""),  row.names = F, sep=sep)
return(fastainfo_df)
}
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = F
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
fastainfo <- paste(merged_dir, "fastainfo.csv", sep="")
fastainfo_df <- read.csv(file=fastainfo, header=T, sep=sep)
compress = T
start_time <- Sys.time()  # Record the start time
fastainfo_df <- RandomSeqWindows(fastainfo_df, fasta_dir=merged_dir, outdir=randomseq_dir, n=1000, randseed=0, compress=compress, sep=sep)
end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the run time
print(runtime)
