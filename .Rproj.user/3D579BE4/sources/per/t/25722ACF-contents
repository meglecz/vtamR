install.packages("devtools")
install.packages("roxygen2")

library(devtools)
library(roxygen2)
library("seqinr")
library("dplyr")
library("tidyr")

setwd("~/vtamR")
# load local packages
load_all(".")
roxygenise() # Builds the help files
usethis::use_roxygen_md() # rebuild the help files ?

####
# define input filenames
fastqdir <- "/home/meglecz/vtamR/local/small_test"
fileinfo <- "/home/meglecz/vtamR/local/user_input/fileinfo_small.csv"

fastqdir <- "local/mfzr/sorted/"
fileinfo <- "local/user_input/fileinfo_mfzr.csv"

fastqdir <- "/home/meglecz/vtam_benchmark_local/vtam_fish/sorted_mfzr/"
fileinfo <-"/home/meglecz/vtam_benchmark_local/vtam_fish/sorted_mfzr/fileinfo_vtamr.csv"

fastqdir <- "/home/meglecz/vtam_benchmark_local/vtam_bat/fasta/"
fileinfo <- "/home/meglecz/vtam_benchmark_local/vtam_bat/fasta/fileinfo_vtamr.csv"

# create the output directory and check the the slash at the end
outdir <- check_dir(dir="~/vtamR/local/out/small")

# Measure runtime using system.time()
start_time <- Sys.time()  # Record the start time

# define stat data frame that will be completed with counts after each step
stat_df <- data.frame(parameters=character(),
                      asv_count=integer(),
                      read_count=integer(),
                      sample_count=integer(),
                      sample_replicate_count=integer())

# read input fasta files in fileinfo, demultiplex and count the number of reads in each plate-sample-replicate
read_count_df <- read_fastas_from_fileinfo(file=fileinfo, dir=fastqdir, write_csv=F, outdir=outdir)
# make stat counts
stat_df <- get_stat(read_count_df, stat_df, stage="Input", params=NA)

###
### LFN_global_read_count
###
# Eliminate variants with less than global_read_count_cutoff reads in the dataset
global_read_count_cutoff = 2
read_count_df <- LFN_global_read_count(read_count_df, global_read_count_cutoff, write_csv=F, outdir=outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="LFN_global_read_count", params=global_read_count_cutoff)


###
### LFN_filters
###
# LFN_read_count
lfn_read_count_cutoff = 2
read_count_df_lfn_read_count <- LFN_read_count(read_count_df, lfn_read_count_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lfn_read_count, stat_df, stage="LFN_read_count", params=lfn_read_count_cutoff)


# LFN_sample_replicate (by column)
lfn_sample_replicate_cutoff = 0.1
read_count_df_lnf_sample_replicate <- LFN_sample_replicate(read_count_df, lfn_sample_replicate_cutoff, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df_lnf_sample_replicate, stat_df, stage="LFN_sample_replicate", params=lfn_sample_replicate_cutoff)


# LFN_sample_variant (by line)
lnf_variant_cutoff = 0.1
by_replicate = TRUE
read_count_df_lnf_variant <- LFN_variant(read_count_df, lnf_variant_cutoff, by_replicate, write_csv=F, outdir = outdir)
param_values <- paste(lnf_variant_cutoff, by_replicate, sep=";")
stat_df <- get_stat(read_count_df_lnf_variant, stat_df, stage="LFN_variant", params=param_values)


# pool the results of the different filterLFN to one data frame; keep only occurrences that passed all filters
read_count_df <- pool_LFN(read_count_df_lfn_read_count, read_count_df_lnf_variant, read_count_df_lnf_sample_replicate, write_csv=T, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterLFN")
# delete temporary data frames
read_count_df_lfn_read_count <- NULL
read_count_df_lnf_variant <- NULL
read_count_df_lnf_sample_replicate <- NULL

###
### keep repeatable occurrences
###
min_relicate_number = 2
read_count_df <- FilterMinReplicateNumber(read_count_df, min_relicate_number, write_csv=F, outdir = outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterMinReplicateNumber", params=min_relicate_number)

###
### FilerIndel
###
read_count_df <- FilterIndel(read_count_df, write_csv=F, outdir=outdir)
stat_df <- get_stat(read_count_df, stat_df, stage="FilterIndel")






# get unique list of variants
seqs <-unique(read_count_df$asv)
# define a function to transform each sequence to a list of nucleotides
f1 <- function(seq){
  return(strsplit(seq, "")[[1]])
}
# apply the function to each sequence in the vector
seqs1 <- lapply(seqs, f1)
f2 <- function(seq){
  return(splitseq(seq, frame = 0, word = 3))
}
seqs2 <- lapply(seqs1, f2)

f3





###
### print output files
###
write.csv(stat_df, file = paste(outdir, "count_stat.csv", sep=""))
write.csv(read_count_df, file = paste(outdir, "read_count_final.csv", sep=""))

end_time <- Sys.time()  # Record the end time
runtime <- end_time - start_time  # Calculate the runtime
print(runtime)
